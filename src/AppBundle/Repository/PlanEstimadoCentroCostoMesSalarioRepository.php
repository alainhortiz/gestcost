<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoCentroCostoMesSalario;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoCentroCostoMesSalarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoCentroCostoMesSalarioRepository extends EntityRepository
{
    public function graficoTotalesEstimadosCentroCostosFondos($idPlanEstimado,$idCentroCosto)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre,e.totalSalarioCentroCosto,e.totalGastoSalarioPesoProduccionCentroCosto,e.totalPromedioTrabajadorCentroCosto,e.totalSalarioMedioCentroCosto
                FROM AppBundle:PlanEstimadoCentroCostoSalario e
                JOIN e.centroCosto c
                JOIN c.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE d.id =:p1
                AND p.id =:p2
                ORDER BY e.totalSalarioCentroCosto DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idCentroCosto);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAgregarEstimadoFondoCentroCosto($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //Obtener el total de ventas para esta division
            $totalVentaCentroCosto = $this->totalEstimadoCentroCostoVenta($data);

            if (empty($totalVentaCentroCosto)) {
                $totalVentaCentroCosto = 0;
            } else {
                $totalVentaCentroCosto = $totalVentaCentroCosto[0]['totalVentaCentroCostoMes'];
            }

            //agregar el presupuesto mensual para los Centros de Costos
            $estimadoCentroCosto = $this->agregarTotalEstimadoFondoCentroCosto($data,$totalVentaCentroCosto);

            if(is_string($estimadoCentroCosto)) {
                $em->rollback();
                $msg = $estimadoCentroCosto;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Asignar presupuesto mensual para un centro de costo',
                    'descripcion' => 'Se asignó el presupuesto mensual de recursos humanos a: '.$estimadoCentroCosto->getCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al asignar el presupuesto mensual por Centros de Costos del Plan de Recursos Humanos';
        }
        return $msg;
    }

    public function masterModificadorEstimadoFondoCentroCosto($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //Obtener el total de ventas para esta division
            $totalVentaCentroCosto = $this->totalEstimadoCentroCostoVenta($data);

            if(empty($totalVentaCentroCosto)) {
                $totalVentaCentroCosto = 0;
            } else {
                $totalVentaCentroCosto = $totalVentaCentroCosto[0]['totalVentaCentroCostoMes'];
            }

            //Modificar el presupuesto mensual para las divisiones
            $estimadoCentroCosto = $this->modificarTotalEstimadoFondoCentroCosto($data,$totalVentaCentroCosto);

            if(is_string($estimadoCentroCosto)) {
                $em->rollback();
                $msg = $estimadoCentroCosto;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Modificar presupuesto mensual por centro de costo al Plan de Recursos humanos',
                    'descripcion' => 'Se modificó el presupuesto mensual de recursos humanos  a: '.$estimadoCentroCosto->getCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al modificar el presupuesto mensual por centro de costo del Plan de Recursos Humanos';
        }
        return $msg;
    }

    public function totalEstimadoCentroCostoVenta($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.totalVentaCentroCostoMes 
                FROM AppBundle:PlanEstimadoCentroCostoMes e
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE e.mes =:p1
                AND c.id =:p2
                AND p.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $data['mes']);
        $query->setParameter('p2', $data['centroCosto']);
        $query->setParameter('p3', $data['idPlanEstimado']);

        return $query->getResult();

    }

    public function totalTrabajadoresCentroCosto($idCentroCosto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT SUM(e.cantidad) as totalTrabajador
                FROM AppBundle:PlantillaCargo e
                JOIN e.centroCosto c
                WHERE c.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idCentroCosto);

        return $query->getResult();

    }

    public function agregarTotalEstimadoFondoCentroCosto($data,$totalVenta)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoCentroCostoFondo = new PlanEstimadoCentroCostoMesSalario();
            $totalEstimadoCentroCostoFondo->setMes($data['mes']);
            $totalEstimadoCentroCostoFondo->setTotalSalarioCentroCostoMes($data['presupuesto']);
            $totalEstimadoCentroCostoFondo->setTotalPromedioTrabajadorCentroCostoMes($data['trabajadorPromedio']);

            //Calcular el gasto de salario x peso de produccion del centro de costo
            if ($totalVenta !== 0) {
                $GSXPP = (int) ($data['presupuesto'] / $totalVenta);
            } else {
                $GSXPP = 0;
            }

            $totalEstimadoCentroCostoFondo->setTotalGastoSalarioPesoProduccionCentroCostoMes($GSXPP);

            //Calcular el salario medio de la division
            if ($data['trabajadorPromedio'] !== 0) {
                $SM = (int) ($data['presupuesto'] / $data['trabajadorPromedio']);
            } else {
                $SM = 0;
            }

            $totalEstimadoCentroCostoFondo->setTotalSalarioMedioCentroCostoMes($SM);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoCentroCostoFondo->setDivisionCentroCosto($divisionCentroCosto);

            $centroCosto = $em->getRepository('AppBundle:CentroCosto')->find($data['centroCosto']);
            $totalEstimadoCentroCostoFondo->setCentroCosto($centroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoCentroCostoFondo->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoCentroCostoFondo);
            $em->flush();
            $msg = $totalEstimadoCentroCostoFondo;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El fondo de salario mensual para este centro de costo ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el fondo de salario mensual de este centro de costo';
            }
        }
        return $msg;
    }

    public function modificarTotalEstimadoFondoCentroCosto($data,$totalVenta)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $centroCosto = $em->getRepository('AppBundle:CentroCosto')->find($data['centroCosto']);
            $mes = $data['mes'];
            $totalEstimadoCentroCostoFondo = $em->getRepository('AppBundle:PlanEstimadoCentroCostoMesSalario')->findOneBy(array('mes' => $mes,'planEstimadoIndicadores' => $planEstimado, 'centroCosto' => $centroCosto));

            if (!empty($totalEstimadoCentroCostoFondo)) {

                $totalEstimadoCentroCostoFondo->setTotalSalarioCentroCostoMes($data['presupuesto']);
                $totalEstimadoCentroCostoFondo->setTotalPromedioTrabajadorCentroCostoMes($data['trabajadorPromedio']);

                //Calcular el gasto de salario x peso de produccion del centro de costo
                if ($totalVenta !== 0) {
                    $GSXPP = (int) ($data['presupuesto'] / $totalVenta);
                } else {
                    $GSXPP = 0;
                }
                $totalEstimadoCentroCostoFondo->setTotalGastoSalarioPesoProduccionCentroCostoMes($GSXPP);

                //Calcular el salario medio de la division
                if ($data['trabajadorPromedio'] !== 0) {
                    $SM = (int) ($data['presupuesto'] / $data['trabajadorPromedio']);
                } else {
                    $SM = 0;
                }
                $totalEstimadoCentroCostoFondo->setTotalSalarioMedioCentroCostoMes($SM);

                $em->persist($totalEstimadoCentroCostoFondo);
                $em->flush();
                $msg = $totalEstimadoCentroCostoFondo;
            } else {
                $msg = $totalEstimadoCentroCostoFondo;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el fondo de salario mensual del centro de costo';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMesFondo($data)
    {
        try {
            $em = $this->getEntityManager();
            $centroCosto = $em->getRepository('AppBundle:CentroCosto')->find($data['idCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoCentroCostoMesFondo = $em->getRepository('AppBundle:PlanEstimadoCentroCostoSalario')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'centroCosto' => $centroCosto));

            if (!empty($aprobarEstimadoCentroCostoMesFondo)) {

                $aprobarEstimadoCentroCostoMesFondo->setAprobarPrespuestoCentroCostoMesFondo(true);

                $em->flush();
                $msg = $aprobarEstimadoCentroCostoMesFondo;
            } else {
                $msg = $aprobarEstimadoCentroCostoMesFondo;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar el fondo de salario mensual por centros de costos del Plan de Recursos humanos';
        }

        return $msg;
    }

    public function verificarAprobadoEstimadoFondoCentroCostoMeses($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobarPrespuestoCentroCostoMesFondo
                FROM AppBundle:PlanEstimadoDivisionSalario e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoCentroCostoMesFondo = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }


    // Funciones para la exportarción a Excel el Plan
    public function datosExportEstimadoSalarioCentroCosto($idPlanEstimado,$idDivisionCentroCosto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre as centro, e.totalSalarioCentroCostoMes,e.totalPromedioTrabajadorCentroCostoMes, e.totalGastoSalarioPesoProduccionCentroCostoMes, e.totalSalarioMedioCentroCostoMes
                FROM AppBundle:PlanEstimadoCentroCostoMesSalario e
                JOIN e.planEstimadoIndicadores p
                JOIN e.centroCosto c
                JOIN c.divisionCentroCosto d
                WHERE d.id = :p1 
                AND p.id = :p2
                GROUP BY c.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDivisionCentroCosto);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAgregarEstimadoFondoCentroCostoMes($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //Obtener el total de promedio de trabajadores para este centro de costo
            $totalTrabajadorCentroCosto = $em->getRepository('AppBundle:PlanEstimadoCentroCostoSalario')->totalTrabajadoresCentroCosto($data['idCentroCosto']);

            if($totalTrabajadorCentroCosto[0]['totalTrabajador'] === null) {
                $em->rollback();
                return  'Este Centro de Costo que no tiene trabajadores en su plantilla, no se puede aprobar el fondo mensual de salario';
            }

            $totalTrabajadorCentroCosto = $totalTrabajadorCentroCosto[0]['totalTrabajador'];

            //agregar el presupuesto mensual para los centros de costos
            $estimadoCentroCostoMes = $this->agregarEstimadoFondoCentroCostoMes($data,$totalTrabajadorCentroCosto);

            if(is_string($estimadoCentroCostoMes)) {
                $em->rollback();
                $msg = $estimadoCentroCostoMes;
            } else {
                // aprobar la distribucion mensual para este centro de costo
                $em->getRepository('AppBundle:PlanEstimadoCentroCostoSalario')->aprobarTotalEstimadoCentroCostoMesFondo($data);

                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Asignar fondo de salario mensual por centro de costo al Plan de Recursos humanos',
                    'descripcion' => 'Se asignó el total del fondo de salario mensual a: ' . $estimadoCentroCostoMes->getCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al aprobar el fondo de salario mensual por centros de costos del Plan de recursos humanos';
        }
        return $msg;
    }

    public function totalEstimadoCentroCostoMesVenta($data,$mes)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.totalVentaCentroCostoMes 
                FROM AppBundle:PlanEstimadoCentroCostoMes e
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE e.mes =:p1
                AND c.id =:p2
                AND p.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1',$mes);
        $query->setParameter('p2', $data['idCentroCosto']);
        $query->setParameter('p3', $data['idPlanEstimado']);

        return $query->getResult();

    }

    public function agregarEstimadoFondoCentroCostoMes($data,$totalTrabajador)
    {
        try {
            $em = $this->getEntityManager();

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['idDivisionCentroCosto']);
            $centroCosto = $em->getRepository('AppBundle:CentroCosto')->find($data['idCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            foreach ($data['presupuesto'] as $registro) {
                //Obtener el total de ventas para esta division
                $totalVentaCentroCostoMes = $this->totalEstimadoCentroCostoMesVenta($data,$registro['mes']);

                if($totalVentaCentroCostoMes[0]['totalVentaCentroCostoMes'] === null) {
                    $totalVentaCentroCostoMes = 0;
                } else {
                    $totalVentaCentroCostoMes = $totalVentaCentroCostoMes[0]['totalVentaCentroCostoMes'];
                }

                //Calcular el gasto de salario x peso de produccion de la division
                if ($totalVentaCentroCostoMes !== 0) {
                    $GSXPP = (int) ($registro['presupuesto'] / $totalVentaCentroCostoMes);
                } else {
                    $GSXPP = 0;
                }

                //Calcular el salario medio de la division
                if ($totalTrabajador !== 0) {
                    $SM = (int) ($registro['presupuesto'] / $totalTrabajador);
                } else {
                    $SM = 0;
                }
                $totalEstimadoCentroCostoMes = new PlanEstimadoCentroCostoMesSalario();
                $totalEstimadoCentroCostoMes->setMes($registro['mes']);
                $totalEstimadoCentroCostoMes->setTotalSalarioCentroCostoMes($registro['presupuesto']);
                $totalEstimadoCentroCostoMes->setTotalPromedioTrabajadorCentroCostoMes($totalTrabajador);
                $totalEstimadoCentroCostoMes->setTotalGastoSalarioPesoProduccionCentroCostoMes($GSXPP);
                $totalEstimadoCentroCostoMes->setTotalSalarioMedioCentroCostoMes($SM);
                $totalEstimadoCentroCostoMes->setDivisionCentroCosto($divisionCentroCosto);
                $totalEstimadoCentroCostoMes->setCentroCosto($centroCosto);
                $totalEstimadoCentroCostoMes->setPlanEstimadoIndicadores($planEstimado);
                $em->persist($totalEstimadoCentroCostoMes);
            }

            $em->flush();
            $msg = $totalEstimadoCentroCostoMes;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0)
            {
                $msg = 'El total del fondo de salario mensual para este centro de costo ya existe, no se puede agregar';
            }
            else
            {
                $msg = 'Se produjo un error al asignar el fondo de salario mensual para este centro de costo';
            }
        }
        return $msg;
    }

    public function graficosFondoEstimadoCentroCostoMensual($idPlanEstimado,$CentroCosto)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes,e.totalSalarioCentroCostoMes,e.totalGastoSalarioPesoProduccionCentroCostoMes,e.totalPromedioTrabajadorCentroCostoMes,e.totalSalarioMedioCentroCostoMes  
                FROM AppBundle:PlanEstimadoCentroCostoMesSalario e 
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE c.id = :p1 
                AND p.id = :p2
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $CentroCosto);
        $query->setParameter('p2' , $idPlanEstimado);

        return $query->getResult();

    }

    public function graficosFondoEstimadoCentroCostoMensualTodos($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, c.nombre as centro, e.mes,e.totalSalarioCentroCostoMes,e.totalGastoSalarioPesoProduccionCentroCostoMes,e.totalPromedioTrabajadorCentroCostoMes,e.totalSalarioMedioCentroCostoMes  
                FROM AppBundle:PlanEstimadoCentroCostoMesSalario e 
                JOIN e.divisionCentroCosto d
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $idPlanEstimado);

        return $query->getResult();

    }

    // Funciones para la exportarción a Excel el Plan
    public function datosExportEstimadoSalarioCentroCostoMes($idPlanEstimado,$idDivisionCentroCosto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre as centro, e.mes, e.totalSalarioCentroCostoMes,e.totalPromedioTrabajadorCentroCostoMes, e.totalGastoSalarioPesoProduccionCentroCostoMes, e.totalSalarioMedioCentroCostoMes
                FROM AppBundle:PlanEstimadoCentroCostoMesSalario e
                JOIN e.planEstimadoIndicadores p
                JOIN e.centroCosto c
                JOIN c.divisionCentroCosto d
                WHERE d.id = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDivisionCentroCosto);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportEstimadoFondoCentroCostoMeses($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, c.nombre as centro, e.mes, e.totalSalarioCentroCostoMes,e.totalPromedioTrabajadorCentroCostoMes, e.totalGastoSalarioPesoProduccionCentroCostoMes, e.totalSalarioMedioCentroCostoMes
                FROM AppBundle:PlanEstimadoCentroCostoMesSalario e
                JOIN e.planEstimadoIndicadores p
                JOIN e.centroCosto c
                JOIN c.divisionCentroCosto d
                WHERE p.id = :p1 
                ORDER BY d.id, c.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportTotalEstimadoCentroCostoMesVenta($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, c.nombre as centro, e.mes, e.totalVentaCentroCostoMes
                FROM AppBundle:PlanEstimadoCentroCostoMes e
                JOIN e.divisionCentroCosto d
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY d.id, c.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }
}
