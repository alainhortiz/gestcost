<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoDivisionMesCombustible;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoDivisionMesCombustibleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoDivisionMesCombustibleRepository extends EntityRepository
{
    public function masterAgregarEstimadoCombustibleDivisionMes($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //agregar el presupuesto mensual para las divisiones
            $estimadoDivisionMes = $this->agregarEstimadoCombustibleDivisionMes($data);

            if(is_string($estimadoDivisionMes)) {
                $em->rollback();
                $msg = $estimadoDivisionMes;
            } else {
                // aprobar la distribucion mensual para esta division
                $em->getRepository('AppBundle:PlanEstimadoDivisionCombustible')->aprobarTotalEstimadoDivisionMesCombustible($data);
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Asignar el tipo de combustible mensual a la división: '.$estimadoDivisionMes->getDivisionCentroCosto()->getNombre(),
                    'descripcion' => 'Se asignó el tipo de combustible mensual a: '.$estimadoDivisionMes->getTipoCombustible()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al aprobar la distribución del tipo de combustible mensual para esta división';
        }
        return $msg;
    }

    public function agregarEstimadoCombustibleDivisionMes($data)
    {
        try {
            $em = $this->getEntityManager();

            $tipoCombustible = $em->getRepository('AppBundle:TipoCombustible')->find($data['tipoCombustible']);
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['idDivisionCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            foreach ($data['asignacion'] as $registro) {

                $totalEstimadoDivisionMes = new PlanEstimadoDivisionMesCombustible();
                $totalEstimadoDivisionMes->setMes($registro['mes']);
                $totalEstimadoDivisionMes->setLtsMes($registro['litros']);
                $totalEstimadoDivisionMes->setPrecio($registro['precio']);
                $totalEstimadoDivisionMes->setImporteMes($registro['importe']);
                $totalEstimadoDivisionMes->setTipoCombustible($tipoCombustible);
                $totalEstimadoDivisionMes->setDivisionCentroCosto($divisionCentroCosto);
                $totalEstimadoDivisionMes->setPlanEstimadoIndicadores($planEstimado);
                $em->persist($totalEstimadoDivisionMes);
            }

            $em->flush();
            $msg = $totalEstimadoDivisionMes;


        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0)
            {
                $msg = 'La asignación del tipo de combustible mensual para esta división ya existe, no se puede agregar';
            }
            else
            {
                $msg = 'Se produjo un error al aprobar la distribución del tipo de combustible mensual para esta división';
            }
        }
        return $msg;
    }

    public function graficosCombustibleEstimadoDivisionMensual($idPlanEstimado,$division,$tipoCombustible)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes,e.ltsMes,e.importeMes,e.precio,t.nombre as tipo
                FROM AppBundle:PlanEstimadoDivisionMesCombustible e 
                JOIN e.tipoCombustible t
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE t.id =:p1
                AND d.id = :p2 
                AND p.id = :p3
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $tipoCombustible);
        $query->setParameter('p2' , $division);
        $query->setParameter('p3' , $idPlanEstimado);

        return $query->getResult();

    }

    // Datos para exportar a Excel
    public function datosExportPlanEstimadoDivisionMesCombustible($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, e.mes, t.nombre as tipoCombustible, e.ltsMes, e.precio, e.importeMes 
                FROM AppBundle:PlanEstimadoDivisionMesCombustible e
                JOIN e.tipoCombustible t
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY d.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }
}
