<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoDivisionOtrosGastos;
use AppBundle\Entity\PlanEstimadoOtrosGastos;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoOtrosGastosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoOtrosGastosRepository extends EntityRepository
{
    public function totalEstimadoOtroGasto($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT sum(e.totalOtroGasto) as totalOtroGasto 
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['totalOtroGasto'];

    }

    public function cantidadEstimadoOtroGasto($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.otroGasto) as cantidadOtroGasto 
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadOtroGasto'];

    }

    public function cantidadEstimadoMesOtroGasto($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.otroGasto) as cantidadOtroGastoMes 
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoMesOtroGasto =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadOtroGastoMes'];

    }

    public function graficoTotalesEstimadosOtrosGastos($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre,e.totalOtroGasto
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.otroGasto c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY e.totalOtroGasto DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAgregarEstimadoOtroGasto($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //agregar el kW mensual para las divisiones
            $estimadoServicio = $this->agregarTotalEstimadoOtroGasto($data);

            if(is_string($estimadoServicio)) {
                $em->rollback();
                $msg = $estimadoServicio;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Asignar presupuesto por servicio al Plan de Otros Gastos',
                    'descripcion' => 'Se asignÃ³ el presupuesto para el servicio: '.$estimadoServicio->getOtroGasto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al aprobar el presupuesto por servicios del Plan de Otros Gastos';
        }
        return $msg;
    }

    public function agregarTotalEstimadoOtroGasto($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoOtroGasto = new PlanEstimadoOtrosGastos();
            $totalEstimadoOtroGasto->setTotalOtroGasto($data['presupuesto']);

            $otroGasto = $em->getRepository('AppBundle:OtroGasto')->find($data['otroGasto']);
            $totalEstimadoOtroGasto->setOtroGasto($otroGasto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoOtroGasto->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoOtroGasto);
            $em->flush();
            $msg = $totalEstimadoOtroGasto;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El presupuesto de este servicio ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el presupuesto para este servicio';
            }
        }
        return $msg;
    }

    public function masterModificadorEstimadoOtroGasto($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //agregar el presupuesto mensual para las divisiones
            $estimadoServicio = $this->modificarTotalEstimadoOtroGasto($data);

            if(is_string($estimadoServicio)) {
                $em->rollback();
                $msg = $estimadoServicio;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Modificar el presupuesto por servicio del Plan de Otros Gastos',
                    'descripcion' => 'Se modificÃ³ el presupuesto por servicio del Plan de Otros Gastos a: '.$estimadoServicio->getOtroGasto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al aprobar el presupuesto por servicios del Plan de Otros Gastos';
        }
        return $msg;
    }

    public function modificarTotalEstimadoOtroGasto($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $otroGasto = $em->getRepository('AppBundle:OtroGasto')->find($data['otroGasto']);

            $totalEstimadoOtroGasto = $em->getRepository('AppBundle:PlanEstimadoOtrosGastos')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'otroGasto' => $otroGasto));

            if (!empty($totalEstimadoOtroGasto)) {

                $totalEstimadoOtroGasto->setTotalOtroGasto($data['presupuesto']);

                $em->persist($totalEstimadoOtroGasto);
                $em->flush();
                $msg = $totalEstimadoOtroGasto;
            } else {
                $msg = $totalEstimadoOtroGasto;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el presupuesto de este servicio';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoMesOtroGasto($data)
    {
        try {
            $em = $this->getEntityManager();
            $otroGasto = $em->getRepository('AppBundle:OtroGasto')->find($data['idOtroGasto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoMesOtroGasto = $em->getRepository('AppBundle:PlanEstimadoOtrosGastos')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'otroGasto' => $otroGasto));

            if (!empty($aprobarEstimadoMesOtroGasto)) {

                $aprobarEstimadoMesOtroGasto->setAprobarPrespuestoMesOtroGasto(true);

                $em->flush();
                $msg = $aprobarEstimadoMesOtroGasto;
            } else {
                $msg = $aprobarEstimadoMesOtroGasto;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por servicios del Plan de Otros Gastos';
        }

        return $msg;
    }

    public function otrosGastosActivos($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.id, d.nombre
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.otroGasto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function verificarAprobadoEstimadoOtrosGastosMeses($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobarPrespuestoMesOtroGasto
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoMesOtroGasto = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    public function verificarAprobadoEstimadoOtroGastoDivisionMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as otroGasto, e.aprobarPrespuestoDivisionMesOtroGasto as aprobado
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.planEstimadoIndicadores p
                JOIN e.otroGasto d
                WHERE e.aprobarPrespuestoDivisionMesOtroGasto = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function verificarAprobadoEstimadoOtroGastoCentroCostoMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as otroGasto, e.aprobarPrespuestoCentroCostoMesOtroGasto as aprobado
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.planEstimadoIndicadores p
                JOIN e.otroGasto d
                WHERE e.aprobarPrespuestoCentroCostoMesOtroGasto = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function aprobarTotalEstimadoDivisionOtroGasto($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $otroGasto = $em->getRepository('AppBundle:OtroGasto')->find($data['otroGasto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoDivisionOtroGasto = $em->getRepository('AppBundle:PlanEstimadoOtrosGastos')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'otroGasto' => $otroGasto));

            if (!empty($aprobarEstimadoDivisionOtroGasto)) {

                $aprobarEstimadoDivisionOtroGasto->setAprobarPrespuestoDivisionMesOtroGasto(true);

                $em->flush();
                $msg = $aprobarEstimadoDivisionOtroGasto;
            } else {
                $msg = $aprobarEstimadoDivisionOtroGasto;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual de este servicio para las divisiones';
        }

        return $msg;
    }

    public function masterAprobarTotalEstimadoCentroCostoOtroGasto($data, $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //agregar el presupuesto mensual para los Centros de Costos
            $aprobarServicioCentroCostoMensual = $this->aprobarTotalEstimadoCentroCostoOtroGasto($data);

            if (is_string($aprobarServicioCentroCostoMensual)) {
                $em->rollback();
                $msg = $aprobarServicioCentroCostoMensual;
                return $msg;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Calcular el monto total de un servicio para una divisiÃ³n',
                'descripcion' => 'Se aprobÃ³ el presupuesto de este servicio por centros de costos para la divisiÃ³n: ' . $aprobarServicioCentroCostoMensual->getDivisionCentroCosto()->getNombre()
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            // verificar si todas las divisiones que tienen presupuesto en este servicio ya estan aprobadas
            $totalServiciosDivisiones  = $em->getRepository('AppBundle:PlanEstimadoDivisionOtrosGastos')->planOtrosGastosTotalServiciosDivisiones($data);
            $totalServicios =  $this->planOtrosGastosTotalServicios($data);
            $totalServiciosDivisiones = $totalServiciosDivisiones === null ? $data['presupuesto'] : $totalServiciosDivisiones + $data['presupuesto'];
            $verificar = $totalServicios - $totalServiciosDivisiones;

            if ($verificar === 0) {
                //aprobar toda la distribucion de los centros de costos en las divisiones q tienen presupuesto en este servicio
                $aprobar = $this->aprobarEstimadoCentroCostoMesOtroGasto($data);

                if (is_string($aprobar)) {
                    $em->rollback();
                    $msg = $aprobar;
                    return $msg;
                }

                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Aprobar el presupuesto por centros de costos de una divisiÃ³n',
                    'descripcion' => 'Se aprobÃ³ el presupuesto por centros de costos para la divisiÃ³n: ' . $aprobar->getDivisionCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);
            }

            // verificar si todas los servicios ya estan aprobados
            $cantServiciosDivisiones  = $this->cantidadServiciosDivisiones($data);
            $cantServiciosDivisionesAprobados = $this->cantidadServiciosDivisionesAprobadas($data);
            $cantServiciosDivisionesAprobados = $cantServiciosDivisionesAprobados === 0 ? 1 : $cantServiciosDivisionesAprobados + 1;
            $verificar = $cantServiciosDivisiones - $cantServiciosDivisionesAprobados;

            if ($verificar === 0) {
                //aprobar toda la distribucion de los centros de costos en todos los servicios.
                $aprobar = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->aprobarTotalEstimadoCentroCostoMesOtroGasto($data);

                if (is_string($aprobar)) {
                    $em->rollback();
                    $msg = $aprobar;
                    return $msg;
                }

                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Aprobar el presupuesto por centros de costos de una divisiÃ³n',
                    'descripcion' => 'Se aprobÃ³ el presupuesto por centros de costos para la divisiÃ³n: ' . $aprobar->getDivisionCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);
            }

            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al aprobar el presupuesto por Centros de Costos del Plan de Otros Gastos';
        }
        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoOtroGasto($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoDivisionOtroGasto = new PlanEstimadoDivisionOtrosGastos();
            $totalEstimadoDivisionOtroGasto->setTotalOtroGasto($data['presupuesto']);
            $totalEstimadoDivisionOtroGasto->setAprobarPrespuestoCentroCostoMesOtroGasto(true);

            $otroGasto = $em->getRepository('AppBundle:OtroGasto')->find($data['otroGasto']);
            $totalEstimadoDivisionOtroGasto->setOtroGasto($otroGasto);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoDivisionOtroGasto->setDivisionCentroCosto($divisionCentroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoDivisionOtroGasto->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoDivisionOtroGasto);
            $em->flush();
            $msg = $totalEstimadoDivisionOtroGasto;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El presupuesto de este servicio para esta divisiÃ³n ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el presupuesto de este servicio para esta divisiÃ³n';
            }
        }
        return $msg;
    }

    public function planOtrosGastosTotalServicios($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.totalOtroGasto as total 
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.otroGasto s
                JOIN e.planEstimadoIndicadores p
                WHERE s.id =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $data['otroGasto']);
        $query->setParameter('p2', $data['idPlanEstimado']);

        $total = $query->getResult();

        return $total[0]['total'];

    }

    public function cantidadServiciosDivisiones($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.id
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    public function cantidadServiciosDivisionesAprobadas($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.id
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoCentroCostoMesOtroGasto =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    public function aprobarEstimadoCentroCostoMesOtroGasto($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $otroGasto = $em->getRepository('AppBundle:OtroGasto')->find($data['otroGasto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoCentroCostoOtroGasto = $em->getRepository('AppBundle:PlanEstimadoOtrosGastos')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'otroGasto' => $otroGasto));

            if (!empty($aprobarEstimadoCentroCostoOtroGasto)) {

                $aprobarEstimadoCentroCostoOtroGasto->setAprobarPrespuestoCentroCostoMesOtroGasto(true);

                $em->flush();
                $msg = $aprobarEstimadoCentroCostoOtroGasto;
            } else {
                $msg = $aprobarEstimadoCentroCostoOtroGasto;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual de los servicios para los centros de costos del Plan de Otros Gastos';
        }

        return $msg;
    }

    public function verificarAprobadoOtroGastoDivisionMeses($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobarPrespuestoDivisionMesOtroGasto
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesOtroGasto = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    ///Funciones para el Export
    public function datosExportEstimadoOtrosGastosUnicos($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT (d.nombre) as otroGasto
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.otroGasto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                ORDER BY d.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportTipoServicioUnico($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT t.nombre as tipoServicio
                FROM AppBundle:PlanEstimadoOtrosGastos e 
                JOIN e.otroGasto o
                JOIN o.tipoServicio t
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                ORDER BY t.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $idPlanEstimado);

        return $query->getResult();

    }

}
