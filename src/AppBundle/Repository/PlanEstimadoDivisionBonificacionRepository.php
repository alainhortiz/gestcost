<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoDivisionBonificacion;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoDivisionBonificacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoDivisionBonificacionRepository extends EntityRepository
{
    public function totalEstimadoDivisionBonificacion($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT sum(e.totalBonificacion) as totalBonificacion 
                FROM AppBundle:PlanEstimadoDivisionBonificacion e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['totalBonificacion'];

    }

    public function graficoTotalesEstimadosDivisionesBonificacion($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, d.nombre, e.totalBonificacion
                FROM AppBundle:PlanEstimadoDivisionBonificacion e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY e.totalBonificacion DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function agregarTotalEstimadoBonificacionDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoDivisionBonificacion = new PlanEstimadoDivisionBonificacion();
            $totalEstimadoDivisionBonificacion->setTotalBonificacion($data['presupuesto']);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoDivisionBonificacion->setDivisionCentroCosto($divisionCentroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoDivisionBonificacion->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoDivisionBonificacion);
            $em->flush();
            $msg = $totalEstimadoDivisionBonificacion;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El presupuesto de bonificación para esta división ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el presupuesto de bonificación para esta división';
            }
        }
        return $msg;
    }

    public function modificarTotalEstimadoBonificacionDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);

            $totalEstimadoDivisionBonificacion = $em->getRepository('AppBundle:PlanEstimadoDivisionBonificacion')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($totalEstimadoDivisionBonificacion)) {

                $totalEstimadoDivisionBonificacion->setTotalBonificacion($data['presupuesto']);

                $em->persist($totalEstimadoDivisionBonificacion);
                $em->flush();
                $msg = $totalEstimadoDivisionBonificacion;
            } else {
                $msg = $totalEstimadoDivisionBonificacion;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el presupuesto de bonificación para esta división';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesBonificacion($data)
    {
        try {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['idDivisionCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoDivisionMesBonificacion = $em->getRepository('AppBundle:PlanEstimadoDivisionBonificacion')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoDivisionMesBonificacion)) {

                $aprobarEstimadoDivisionMesBonificacion->setAprobarPrespuestoDivisionMesBonificacion(true);

                $em->flush();
                $msg = $aprobarEstimadoDivisionMesBonificacion;
            } else {
                $msg = $aprobarEstimadoDivisionMesBonificacion;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por divisiones del Plan de Bonificación';
        }

        return $msg;
    }

    public function verificarAprobadoEstimadoBonificacionDivisionMeses($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobarPrespuestoDivisionMesBonificacion
                FROM AppBundle:PlanEstimadoDivisionBonificacion e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesBonificacion = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    public function cantidadEstimadoDivisionBonificacion($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadBonificacionDivision 
                FROM AppBundle:PlanEstimadoDivisionBonificacion e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadBonificacionDivision'];

    }

    public function cantidadEstimadoDivisionMesBonificacion($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadBonificacionDivisionMes 
                FROM AppBundle:PlanEstimadoDivisionBonificacion e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesBonificacion =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadBonificacionDivisionMes'];

    }

    public function planBonificacionDivisionUnica($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT d.id, d.nombre 
                FROM AppBundle:PlanEstimadoDivisionBonificacion e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function verificarAprobadoEstimadoBonificacionCentroCostoMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, e.aprobarPrespuestoCentroCostoMesBonificacion as aprobado
                FROM AppBundle:PlanEstimadoDivisionBonificacion e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoCentroCostoMesBonificacion = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function aprobarTotalEstimadoCentroCostoBonificacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoCentroCostoBonificacion = $em->getRepository('AppBundle:PlanEstimadoDivisionBonificacion')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoCentroCostoBonificacion)) {

                $aprobarEstimadoCentroCostoBonificacion->setAprobarPrespuestoCentroCostoMesBonificacion(true);

                $em->flush();
                $msg = $aprobarEstimadoCentroCostoBonificacion;
            } else {
                $msg = $aprobarEstimadoCentroCostoBonificacion;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual para los centros de costos de esta división';
        }

        return $msg;
    }

    public function planBonificacionDivisionUnicaExportar($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT (d.nombre) as division
                FROM AppBundle:PlanEstimadoDivisionBonificacion e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function planBonificacionCantidadDivisiones($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.id 
                FROM AppBundle:PlanEstimadoDivisionBonificacion e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $data['idPlanEstimado']);

        return count($query->getResult());

    }
}
