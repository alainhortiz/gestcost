<?php

namespace AppBundle\Repository;

use AppBundle\Entity\TipoCombustible;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * TipoCombustibleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TipoCombustibleRepository extends EntityRepository
{
    public function agregarTipoCombustible($data)
    {
        try{
            $em = $this->getEntityManager();
            $tipoCombustible = new TipoCombustible();
            $tipoCombustible->setCodigo($data['codigo']);
            $tipoCombustible->setNombre($data['nombre']);
            $tipoCombustible->setIsActive($data['activo']);

            $em->persist($tipoCombustible);
            $em->flush();
            $msg = $tipoCombustible;

        }catch (Exception $e)
        {
            if(strpos($e->getMessage() , 'Duplicate entry') > 0)
            {
                $msg = 'Este tipo de combustible ya existe, no se puede agregar';
            }
            else
            {
                $msg = 'Se produjo un error al insertar el tipo de combustible';
            }
        }
        return $msg;
    }

    public function modificarTipoCombustible($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $tipoCombustible = $em->getRepository('AppBundle:TipoCombustible')->find($data['idTipoCombustible']);

            if (!empty($tipoCombustible)) {
                $tipoCombustible->setCodigo($data['codigo']);
                $tipoCombustible->setNombre($data['nombre']);
                $tipoCombustible->setIsActive($data['activo']);

                $em->persist($tipoCombustible);
                $em->flush();
                $msg = $tipoCombustible;
            } else {
                $msg = $tipoCombustible;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar el tipo de combustible';
        }

        return $msg;
    }

    public function eliminaTipoCombustible($id)
    {
        try
        {
            $em = $this->getEntityManager();
            $tipoCombustible = $em->getRepository('AppBundle:TipoCombustible')->find($id);

            if (!empty($tipoCombustible)) {
                $tipoCombustible->setIsActive(0);
                $em->persist($tipoCombustible);
                $em->flush();
                $msg = $tipoCombustible;
            } else {
                $msg = $tipoCombustible;
            }

        }catch (Exception $e){

            $msg = 'Se produjo un error al eliminar el tipo de combustible';

        }
        return $msg;
    }

    public function tipoCombustibleLubricante($idLubricante)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT t.nombre, t.precio
                FROM AppBundle:TipoCombustible t
                WHERE t.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idLubricante);

        return $query->getResult();

    }

    public function tipoCombustiblePrecio($year)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT t.id, t.nombre, p.precio
                FROM AppBundle:TipoCombustible t
                JOIN t.preciosCombustibles p
                WHERE p.year = :p1
                GROUP BY t.id, t.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $year);

        return $query->getResult();

    }

    // Datos para exportar a Excel
    public function datosExportTiposCombustibles()
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.codigo, e.nombre, e.precio as Precio
                FROM AppBundle:TipoCombustible e';

        return $em->createQuery($dql)->getResult();

    }
}
