<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoDivisionSalario;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoDivisionSalarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoDivisionSalarioRepository extends EntityRepository
{
    public function totalEstimadoDivisionFondo($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT sum(e.totalSalarioDivision) as totalSalarioDivision 
                FROM AppBundle:PlanEstimadoDivisionSalario e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['totalSalarioDivision'];

    }

    public function cantidadEstimadoDivisionFondo($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadFondoDivision 
                FROM AppBundle:PlanEstimadoDivisionSalario e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadFondoDivision'];

    }

    public function cantidadEstimadoDivisionMesFondo($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadFondoDivisionMes 
                FROM AppBundle:PlanEstimadoDivisionSalario e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesFondo =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadFondoDivisionMes'];

    }

    public function totalEstimadoDivisionPromedioTrabajador($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT sum(e.totalPromedioTrabajador) as totalPromedioTrabajador 
                FROM AppBundle:PlanEstimadoDivisionSalario e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['totalPromedioTrabajador'];

    }

    public function graficoTotalesEstimadosDivisionesFondos($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre,e.totalSalarioDivision,e.totalGastoSalarioPesoProduccion,e.totalPromedioTrabajador,e.totalSalarioMedio
                FROM AppBundle:PlanEstimadoDivisionSalario e
                JOIN e.divisionCentroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY c.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAgregarEstimadoFondoDivision($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //Obtener el total de ventas para esta division
            $totalVentaDivision = $this->totalEstimadoDivisionVenta($data);

            if (empty($totalVentaDivision)) {
                $totalVentaDivision = 0;
            }else{
                $totalVentaDivision = $totalVentaDivision[0]['totalVentaDivision'];
            }

            //agregar el presupuesto mensual para las divisiones
            $estimadoDivision = $this->agregarTotalEstimadoFondoDivision($data,$totalVentaDivision);

            if(is_string($estimadoDivision)) {
                $em->rollback();
                $msg = $estimadoDivision;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Asignar presupuesto por división al Plan de Recursos humanos',
                    'descripcion' => 'Se asignó el presupuesto de recursos humanos a: '.$estimadoDivision->getDivisionCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al aprobar el presupuesto por divisiones del Plan de Recursos Humanos';
        }
        return $msg;
    }

    public function masterModificadorEstimadoFondoDivision($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //Obtener el total estimado de ventas para esta division
            $totalVentaDivision = $this->totalEstimadoDivisionVenta($data);

            if (empty($totalVentaDivision)) {
                $totalVentaDivision = 0;
            }else{
                $totalVentaDivision = $totalVentaDivision[0]['totalVentaDivision'];
            }

            //agregar el presupuesto mensual estimado para las divisiones
            $estimadoDivision = $this->modificarTotalEstimadoFondoDivision($data,$totalVentaDivision);

            if(is_string($estimadoDivision)) {
                $em->rollback();
                $msg = $estimadoDivision;
            } else{
            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Modificar presupuesto por división al Plan de Recursos humanos',
                'descripcion' => 'Se modificó el presupuesto de recursos humanos a: '.$estimadoDivision->getDivisionCentroCosto()->getNombre()
            );
            $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
            $em->commit();
            $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al aprobar el presupuesto por divisiones del Plan de Recursos Humanos';
        }
        return $msg;
    }

    public function totalEstimadoDivisionVenta($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.totalVentaDivision 
                FROM AppBundle:PlanEstimadoDivision e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE d.id =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $data['division']);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return $query->getResult();

    }

    public function totalTrabajadoresDivision($idDivision)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT SUM(e.cantidad) as totalTrabajador
                FROM AppBundle:PlantillaCargo e
                JOIN e.centroCosto c
                JOIN c.divisionCentroCosto d
                WHERE d.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDivision);

        return $query->getResult();

    }

    public function agregarTotalEstimadoFondoDivision($data,$totalVenta)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoDivisionFondo = new PlanEstimadoDivisionSalario();
            $totalEstimadoDivisionFondo->setTotalSalarioDivision($data['presupuesto']);
            $totalEstimadoDivisionFondo->setTotalPromedioTrabajador($data['promedioTrabajador']);

            //Calcular el gasto de salario x peso de produccion de la division
            if ($totalVenta !== 0) {
                $GSXPP = (int) ($data['presupuesto'] / $totalVenta);
            } else {
                $GSXPP = 0;
            }

            $totalEstimadoDivisionFondo->setTotalGastoSalarioPesoProduccion($GSXPP);

            //Calcular el salario medio de la division
            if ($data['promedioTrabajador'] !== 0) {
                $SM = (int) ($data['presupuesto'] / $data['promedioTrabajador'])/12;
            } else {
                $SM = 0;
            }

            $totalEstimadoDivisionFondo->setTotalSalarioMedio($SM);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoDivisionFondo->setDivisionCentroCosto($divisionCentroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoDivisionFondo->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoDivisionFondo);
            $em->flush();
            $msg = $totalEstimadoDivisionFondo;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El fondo de salario de esta división ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el fondo de salario para esta división';
            }
        }
        return $msg;
    }

    public function modificarTotalEstimadoFondoDivision($data,$totalVenta)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);

            $totalEstimadoDivisionFondo = $em->getRepository('AppBundle:PlanEstimadoDivisionSalario')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($totalEstimadoDivisionFondo)) {

                $totalEstimadoDivisionFondo->setTotalSalarioDivision($data['presupuesto']);
                $totalEstimadoDivisionFondo->setTotalPromedioTrabajador($data['promedioTrabajador']);

                //Calcular el gasto de salario x peso de produccion de la division
                if ($totalVenta !== 0) {
                    $GSXPP = (int) ($data['presupuesto'] / $totalVenta);
                } else {
                    $GSXPP = 0;
                }
                $totalEstimadoDivisionFondo->setTotalGastoSalarioPesoProduccion($GSXPP);

                //Calcular el salario medio de la division
                if ($data['promedioTrabajador'] !== 0) {
                    $SM = (int) ($data['presupuesto'] / $data['promedioTrabajador'])/12;
                } else {
                    $SM = 0;
                }
                $totalEstimadoDivisionFondo->setTotalSalarioMedio($SM);

                $em->persist($totalEstimadoDivisionFondo);
                $em->flush();
                $msg = $totalEstimadoDivisionFondo;
            } else {
                $msg = $totalEstimadoDivisionFondo;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el fondo de salario de la división';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesFondo($data)
    {
        try {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['idDivisionCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoDivisionMesFondo = $em->getRepository('AppBundle:PlanEstimadoDivisionSalario')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoDivisionMesFondo)) {

                $aprobarEstimadoDivisionMesFondo->setAprobarPrespuestoDivisionMesFondo(true);

                $em->flush();
                $msg = $aprobarEstimadoDivisionMesFondo;
            } else {
                $msg = $aprobarEstimadoDivisionMesFondo;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar el fondo de salario mensual por divisiones del Plan de Recursos Humanos';
        }

        return $msg;
    }

    public function verificarAprobadoEstimadoFondoDivisionMeses($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobarPrespuestoDivisionMesFondo
                FROM AppBundle:PlanEstimadoDivisionSalario e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesFondo = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    public function verificarAprobadoEstimadoFondoCentroCostoMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, e.aprobarPrespuestoCentroCostoMesFondo as aprobado
                FROM AppBundle:PlanEstimadoDivisionSalario e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE e.aprobarPrespuestoCentroCostoMesFondo = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function aprobarTotalEstimadoCentroCostoFondo($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoCentroCostoFondo = $em->getRepository('AppBundle:PlanEstimadoDivisionSalario')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoCentroCostoFondo)) {

                $aprobarEstimadoCentroCostoFondo->setAprobarPrespuestoCentroCostoMesFondo(true);

                $em->flush();
                $msg = $aprobarEstimadoCentroCostoFondo;
            } else {
                $msg = $aprobarEstimadoCentroCostoFondo;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el fondo de salario mensual para los centros de costos de esta división';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMesFondo($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['idDivisionCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoCentroCostoFondo = $em->getRepository('AppBundle:PlanEstimadoDivisionSalario')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoCentroCostoFondo)) {

                $aprobarEstimadoCentroCostoFondo->setAprobarPrespuestoCentroCostoMesFondo(true);

                $em->flush();
                $msg = $aprobarEstimadoCentroCostoFondo;
            } else {
                $msg = $aprobarEstimadoCentroCostoFondo;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el fondo de salario mensual por centros de costos del Plan de Recursos Humanos';
        }

        return $msg;
    }

    public function verificarInicioEstimadoFondoCentroCosto($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e
                FROM AppBundle:PlanEstimadoDivisionSalario e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesFondo = :p1
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function planFondoDivisionUnica($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT d.id, d.nombre 
                FROM AppBundle:PlanEstimadoDivisionSalario e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    // Funciones para la exportarción a Excel el Plan
    public function datosExportEstimadoSalarioDivision($idPlanEstimado,$idDivisionCentroCosto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, e.totalSalarioDivision, e.totalPromedioTrabajador, e.totalGastoSalarioPesoProduccion, e.totalSalarioMedio, e.aprobarPrespuestoDivisionMesFondo, e.aprobarPrespuestoCentroCostoMesFondo
                FROM AppBundle:PlanEstimadoDivisionSalario e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE d.id = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDivisionCentroCosto);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }
}
