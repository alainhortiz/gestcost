<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoDivision;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoDivisionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoDivisionRepository extends EntityRepository
{
    public function totalEstimadoDivisionVenta($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT sum(e.totalVentaDivision) as totalVentaDivision 
                FROM AppBundle:PlanEstimadoDivision e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['totalVentaDivision'];

    }

    public function cantidadEstimadoDivisionVenta($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadVentaDivision 
                FROM AppBundle:PlanEstimadoDivision e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadVentaDivision'];

    }

    public function cantidadEstimadoDivisionMesVenta($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadVentaDivisionMes 
                FROM AppBundle:PlanEstimadoDivision e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobadoPlanVentasMensualDivision =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadVentaDivisionMes'];

    }

    public function graficoTotalesEstimadosDivisionesVentas($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre,e.totalVentaDivision
                FROM AppBundle:PlanEstimadoDivision e
                JOIN e.divisionCentroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY e.totalVentaDivision DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function agregarTotalEstimadoVentaDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoDivisionVenta = new PlanEstimadoDivision();
            $totalEstimadoDivisionVenta->setTotalVentaDivision($data['presupuesto']);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoDivisionVenta->setDivisionCentroCosto($divisionCentroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoDivisionVenta->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoDivisionVenta);
            $em->flush();
            $msg = $totalEstimadoDivisionVenta;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El presupuesto estimado para esta división ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el presupuesto estimado de esta división';
            }
        }
        return $msg;
    }

    public function modificarTotalEstimadoVentaDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);

            $totalEstimadoDivisionVenta = $em->getRepository('AppBundle:PlanEstimadoDivision')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($totalEstimadoDivisionVenta)) {

                $totalEstimadoDivisionVenta->setTotalVentaDivision($data['presupuesto']);

                $em->persist($totalEstimadoDivisionVenta);
                $em->flush();
                $msg = $totalEstimadoDivisionVenta;
            } else {
                $msg = $totalEstimadoDivisionVenta;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el presupuesto estimado de la división';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesVenta($data)
    {
        try {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['idDivisionCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoDivisionMesVenta = $em->getRepository('AppBundle:PlanEstimadoDivision')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoDivisionMesVenta)) {

                $aprobarEstimadoDivisionMesVenta->setAprobadoPlanVentasMensualDivision(true);

                $em->flush();
                $msg = $aprobarEstimadoDivisionMesVenta;
            } else {
                $msg = $aprobarEstimadoDivisionMesVenta;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar el presupuesto estimado mensual por divisiones del Plan de Ventas';
        }

        return $msg;
    }

    public function verificarAprobadoEstimadoVentaDivisionMeses($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobadoPlanVentasMensualDivision
                FROM AppBundle:PlanEstimadoDivision e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobadoPlanVentasMensualDivision = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    public function verificarInicioEstimadoVentaCentroCosto($idPlanEstimado,$idDivisionCentroCosto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e
                FROM AppBundle:PlanEstimadoDivision e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE e.aprobadoPlanVentasMensualDivision = :p1
                AND d.id = :p2 
                AND p.id = :p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idDivisionCentroCosto);
        $query->setParameter('p3', $idPlanEstimado);

        return $query->getResult();

    }

    public function verificarAprobadoMensualVentaCentroCosto($idPlanEstimado,$idDivisionCentroCosto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobadoPlanVentasMensualCentroCosto
                FROM AppBundle:PlanEstimadoDivision e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE d.id = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDivisionCentroCosto);
        $query->setParameter('p2', $idPlanEstimado);

        $aprobado = $query->getResult();

        return $aprobado[0]['aprobadoPlanVentasMensualCentroCosto'];

    }

    //Para el plan de materias primas
    public function planVentaDivisionUnica($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT d.id, d.nombre 
                FROM AppBundle:PlanEstimadoDivision e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    // Funciones para la exportarción a Excel el Plan
    public function datosExportEstimadoVentaDivision($idPlanEstimado,$idDivisionCentroCosto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, e.totalVentaDivision, e.aprobadoPlanVentasMensualDivision, e.aprobadoPlanVentasMensualCentroCosto
                FROM AppBundle:PlanEstimadoDivision e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE d.id = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDivisionCentroCosto);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    // Para la exportación
    public function planVentaExportDivisionUnica($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT (d.nombre) as division
                FROM AppBundle:PlanEstimadoDivision e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

}
