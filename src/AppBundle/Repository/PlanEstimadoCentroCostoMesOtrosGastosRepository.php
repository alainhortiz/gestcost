<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoCentroCostoMesOtrosGastos;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoCentroCostoMesOtrosGastosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoCentroCostoMesOtrosGastosRepository extends EntityRepository
{
    public function graficosOtroGastoEstimadoCentroCostoMensualTodos($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT s.id as servicio, d.id as division, c.id as centro, e.mes, e.totalOtroGasto 
                FROM AppBundle:PlanEstimadoCentroCostoMesOtrosGastos e 
                JOIN e.otroGasto s
                JOIN e.divisionCentroCosto d
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $idPlanEstimado);

        return $query->getResult();

    }

    public function graficosOtroGastoEstimadoCentroCostoMensual($idPlanEstimado,$otroGasto,$centroCosto)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes,e.totalOtroGasto
                FROM AppBundle:PlanEstimadoCentroCostoMesOtrosGastos e 
                JOIN e.otroGasto s
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE s.id = :p1
                AND c.id = :p2 
                AND p.id = :p3
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $otroGasto);
        $query->setParameter('p2' , $centroCosto);
        $query->setParameter('p3' , $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAgregarEstimadoOtroGastoCentroCosto($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //agregar el presupuesto mensual estimado para los Centros de Costos
            $estimadoCentroCosto = $this->agregarTotalEstimadoOtroGastoCentroCosto($data);

            if(is_string($estimadoCentroCosto)) {
                $em->rollback();
                $msg = $estimadoCentroCosto;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Asignar presupuesto mensual estimado de un servicio para un centro de costo',
                    'descripcion' => 'Se asignó el presupuesto mensual estimado de un servicio a: '.$estimadoCentroCosto->getCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al asignar el presupuesto mensual estimado de este servicio para los Centros de Costos del Plan de Otros Gastos';
        }
        return $msg;
    }

    public function agregarTotalEstimadoOtroGastoCentroCosto($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoCentroCostoOtroGasto = new PlanEstimadoCentroCostoMesOtrosGastos();
            $totalEstimadoCentroCostoOtroGasto->setMes($data['mes']);
            $totalEstimadoCentroCostoOtroGasto->setTotalOtroGasto($data['presupuesto']);

            $otroGasto = $em->getRepository('AppBundle:OtroGasto')->find($data['otroGasto']);
            $totalEstimadoCentroCostoOtroGasto->setOtroGasto($otroGasto);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoCentroCostoOtroGasto->setDivisionCentroCosto($divisionCentroCosto);

            $centroCosto = $em->getRepository('AppBundle:CentroCosto')->find($data['centroCosto']);
            $totalEstimadoCentroCostoOtroGasto->setCentroCosto($centroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoCentroCostoOtroGasto->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoCentroCostoOtroGasto);
            $em->flush();
            $msg = $totalEstimadoCentroCostoOtroGasto;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El presupuesto mensual estimado de este servicio para este centro de costo ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el presupuesto mensual estimado de este servicio para este centro de costo';
            }
        }
        return $msg;
    }

    public function masterModificadorEstimadoOtroGastoCentroCosto($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //Modificar el presupuesto mensual estimado para las divisiones
            $estimadoCentroCosto = $this->modificarTotalEstimadoOtroGastoCentroCosto($data);

            if(is_string($estimadoCentroCosto)) {
                $em->rollback();
                $msg = $estimadoCentroCosto;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Modificar el presupuesto mensual de este servicio para los centro de costo',
                    'descripcion' => 'Se modificó el presupuesto mensual estimado de este servicio de otros gastos  a: '.$estimadoCentroCosto->getCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al modificar el presupuesto mensual estimado de este servicio para los centro de costo del Plan de Otros Gastos';
        }
        return $msg;
    }

    public function modificarTotalEstimadoOtroGastoCentroCosto($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $centroCosto = $em->getRepository('AppBundle:CentroCosto')->find($data['centroCosto']);
            $otroGasto = $em->getRepository('AppBundle:OtroGasto')->find($data['otroGasto']);
            $mes = $data['mes'];
            $totalEstimadoCentroCostoOtroGasto = $em->getRepository('AppBundle:PlanEstimadoCentroCostoMesOtrosGastos')->findOneBy(array('mes' => $mes,'planEstimadoIndicadores' => $planEstimado, 'otroGasto' => $otroGasto, 'centroCosto' => $centroCosto));

            if (!empty($totalEstimadoCentroCostoOtroGasto)) {

                $totalEstimadoCentroCostoOtroGasto->setTotalOtroGasto($data['presupuesto']);

                $em->persist($totalEstimadoCentroCostoOtroGasto);
                $em->flush();
                $msg = $totalEstimadoCentroCostoOtroGasto;
            } else {
                $msg = $totalEstimadoCentroCostoOtroGasto;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el presupuesto mensual estimado de este servicio para este centro de costo';
        }

        return $msg;
    }

    public function graficosOtroGastoEstimadoCentroCostoAgrupado($idPlanEstimado, $division, $otroGasto)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre as centro, SUM(e.totalOtroGasto) as totalOtroGasto
                FROM AppBundle:PlanEstimadoCentroCostoMesOtrosGastos e 
                JOIN e.otroGasto s
                JOIN e.divisionCentroCosto d
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE s.id = :p1 
                AND d.id = :p2
                AND p.id = :p3
                GROUP BY c.nombre
                ORDER BY totalOtroGasto DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $otroGasto);
        $query->setParameter('p2' , $division);
        $query->setParameter('p3' , $idPlanEstimado);

        return $query->getResult();

    }

    public function graficosOtroGastoEstimadoCentroCostoMensualAgrupado($idPlanEstimado, $division, $otroGasto)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes, SUM(e.totalOtroGasto) as totalOtroGasto
                FROM AppBundle:PlanEstimadoCentroCostoMesOtrosGastos e 
                JOIN e.otroGasto s
                JOIN e.divisionCentroCosto d
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE s.id = :p1 
                AND d.id = :p2
                AND p.id = :p3
                GROUP BY e.mes
                ORDER BY e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $otroGasto);
        $query->setParameter('p2' , $division);
        $query->setParameter('p3' , $idPlanEstimado);

        return $query->getResult();

    }

    public function datoExportarOtroGastoEstimadoCentroMensualTodos($idPlanEstimado,$division)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre as centro, s.nombre as otroGasto, e.mes, e.totalOtroGasto 
                FROM AppBundle:PlanEstimadoCentroCostoMesOtrosGastos e 
                JOIN e.otroGasto s
                JOIN e.centroCosto c
                JOIN c.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE d.id =:p1
                AND p.id =:p2
                ORDER BY c.id, s.id, e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $division);
        $query->setParameter('p2' , $idPlanEstimado);

        return $query->getResult();

    }

}
