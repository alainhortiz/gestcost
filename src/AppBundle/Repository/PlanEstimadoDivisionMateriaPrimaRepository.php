<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoCentroCostoMesMateriaPrima;
use AppBundle\Entity\PlanEstimadoDivisionMateriaPrima;
use AppBundle\Entity\PlanEstimadoDivisionMesMateriaPrima;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoDivisionMateriaPrimaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoDivisionMateriaPrimaRepository extends EntityRepository
{
    public function totalEstimadoDivisionMateriaPrima($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT sum(e.totalMateriaPrima) as totalMateriaPrima 
                FROM AppBundle:PlanEstimadoDivisionMateriaPrima e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['totalMateriaPrima'];

    }

    public function graficoTotalesEstimadosDivisionesMateriasPrimas($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, d.nombre, e.totalMateriaPrima
                FROM AppBundle:PlanEstimadoDivisionMateriaPrima e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY e.totalMateriaPrima DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function agregarTotalEstimadoMateriaPrimaDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoDivisionMateriaPrima = new PlanEstimadoDivisionMateriaPrima();
            $totalEstimadoDivisionMateriaPrima->setTotalMateriaPrima($data['presupuesto']);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoDivisionMateriaPrima->setDivisionCentroCosto($divisionCentroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoDivisionMateriaPrima->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoDivisionMateriaPrima);
            $em->flush();
            $msg = $totalEstimadoDivisionMateriaPrima;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El presupuesto estimado de materias primas para esta división ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el presupuesto estimado de materias primas para esta división';
            }
        }
        return $msg;
    }

    public function modificarTotalEstimadoMateriaPrimaDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);

            $totalEstimadoDivisionMateriaPrima = $em->getRepository('AppBundle:PlanEstimadoDivisionMateriaPrima')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($totalEstimadoDivisionMateriaPrima)) {

                $totalEstimadoDivisionMateriaPrima->setTotalMateriaPrima($data['presupuesto']);

                $em->persist($totalEstimadoDivisionMateriaPrima);
                $em->flush();
                $msg = $totalEstimadoDivisionMateriaPrima;
            } else {
                $msg = $totalEstimadoDivisionMateriaPrima;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el presupuesto estimado de materias primas para esta división';
        }

        return $msg;
    }

    public function verificarAprobadoEstimadoMateriaPrimaCentroCosto($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, e.aprobadoPlanMateriaPrimaCentroCosto as aprobado
                FROM AppBundle:PlanEstimadoDivisionMateriaPrima e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE e.aprobadoPlanMateriaPrimaCentroCosto = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAprobarTotalEstimadoCentroCostoMateriaPrima($data, $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //agregar el presupuesto mensual estimado para los Centros de Costos
            $estimadoCentroCostoMensual = $this->agregarEstimadoMensualCentroCostoMateriaPrima($data);

            if (is_string($estimadoCentroCostoMensual)) {
                $em->rollback();
                $msg = $estimadoCentroCostoMensual;
                return $msg;
            }

            //agregar el presupuesto mensual estimado para las Divisiones
            $estimadoDivisionMensual = $this->agregarEstimadoMensualDivisionMateriaPrima($data);

            if (is_string($estimadoDivisionMensual)) {
                $em->rollback();
                $msg = $estimadoDivisionMensual;
                return $msg;
            }

            //aprobar el presupuesto estimado para los Centros de Costos
            $estimadoCentroCosto = $this->aprobarTotalEstimadoCentroCostoMateriaPrima($data);

            if (is_string($estimadoCentroCosto)) {
                $em->rollback();
                $msg = $estimadoCentroCosto;
                return $msg;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Aprobar el presupuesto estimado por centros de costos de una división',
                'descripcion' => 'Se aprobó el presupuesto estimado por centros de costos para la división: ' . $estimadoCentroCosto->getDivisionCentroCosto()->getNombre()
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al aprobar el presupuesto estimado por Centros de Costos del Plan de Materia Prima';
        }
        return $msg;
    }

    public function agregarEstimadoMensualCentroCostoMateriaPrima($data)
    {
        try {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $total = $em->getRepository('AppBundle:PlanEstimadoCentroCostoMes')->planVentaCentroCostoCoeficienteTotal($data);
            $totalMensual = $em->getRepository('AppBundle:PlanEstimadoCentroCostoMes')->planVentaCentroCostoCoeficienteMensual($data);

            if (!empty($total)) {
                foreach ($total as $coeficienteTotal) {
                    $centroTotal = $coeficienteTotal['centro'];
                    foreach ($totalMensual as $coeficienteMensual) {
                        if ($centroTotal === $coeficienteMensual['centro']) {

                            //Calcular el coeficiente de ventas para este centro de costo
                            $coeficiente = (float)$coeficienteMensual['total'] / $coeficienteTotal['total'];

                            //Obtener el importe total de este centro de costo
                            $importeTotal = $em->getRepository('AppBundle:PlanEstimadoCentroCostoMateriaPrima')->obtenerImporteMateriaPrimaCentroCosto($data, $centroTotal);
                            $importeTotal = $importeTotal === null ? 0 : $importeTotal;

                            if ($importeTotal === 0) {
                                $presupuesto = 0;
                            } else {
                                $presupuesto = (int)($importeTotal * $coeficiente);
                            }

                            //Agregar registro en centro de costo mensual de materia prima
                            $totalEstimadoCentroCostoMes = new PlanEstimadoCentroCostoMesMateriaPrima();
                            $centroCosto = $em->getRepository('AppBundle:CentroCosto')->find($coeficienteMensual['centro']);
                            $totalEstimadoCentroCostoMes->setCentroCosto($centroCosto);
                            $totalEstimadoCentroCostoMes->setMes($coeficienteMensual['mes']);
                            $totalEstimadoCentroCostoMes->setDivisionCentroCosto($divisionCentroCosto);
                            $totalEstimadoCentroCostoMes->setPlanEstimadoIndicadores($planEstimado);
                            $totalEstimadoCentroCostoMes->setTotalMateriaPrima($presupuesto);
                            $totalEstimadoCentroCostoMes->setCoeficiente($coeficiente);
                            $em->persist($totalEstimadoCentroCostoMes);
                        }
                    }
                }
            } else {
                return 'Debe completar la distribución mensual de las ventas por centro de costos para poder calcular el coeficiente';
            }

            $em->flush();
            $msg = $totalEstimadoCentroCostoMes;


        } catch (Exception $e) {
            $msg = 'Se produjo un error al asignar el presupuesto mensual estimado para los centros de costos de esta división';
        }

        return $msg;

    }

    public function agregarEstimadoMensualDivisionMateriaPrima($data)
    {
        try {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $divisionMensual = $em->getRepository('AppBundle:PlanEstimadoCentroCostoMesMateriaPrima')->totalMateriaPrimaDivisionMensual($data);

            foreach ($divisionMensual as $division) {

                //Agregar registro en centro de costo mensual de materia prima
                $totalEstimadoDivisionMes = new PlanEstimadoDivisionMesMateriaPrima();
                $totalEstimadoDivisionMes->setMes($division['mes']);
                $totalEstimadoDivisionMes->setDivisionCentroCosto($divisionCentroCosto);
                $totalEstimadoDivisionMes->setPlanEstimadoIndicadores($planEstimado);
                $totalEstimadoDivisionMes->setTotalMateriaPrima($division['total']);
                $em->persist($totalEstimadoDivisionMes);

            }

            $em->flush();
            $msg = $totalEstimadoDivisionMes;


        } catch (Exception $e) {
            $msg = 'Se produjo un error al asignar el presupuesto mensual estimado para las divisiones';
        }

        return $msg;

    }

    public function aprobarTotalEstimadoCentroCostoMateriaPrima($data)
    {
        try {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoCentroCostoMateriaPrima = $em->getRepository('AppBundle:PlanEstimadoDivisionMateriaPrima')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoCentroCostoMateriaPrima)) {

                $aprobarEstimadoCentroCostoMateriaPrima->setAprobadoPlanMateriaPrimaCentroCosto(true);

                $em->flush();
                $msg = $aprobarEstimadoCentroCostoMateriaPrima;
            } else {
                $msg = $aprobarEstimadoCentroCostoMateriaPrima;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar el presupuesto estimado para los centros de costos de esta división';
        }

        return $msg;
    }

    public function verificarAprobadoEstimadoMateriaPrimaCentroCostos($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobadoPlanMateriaPrimaCentroCosto
                FROM AppBundle:PlanEstimadoDivisionMateriaPrima e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobadoPlanMateriaPrimaCentroCosto = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    public function datoExportarTotalEstimadoDivisionMateriaPrima($idPlanEstimado, $idDivisionCentroCosto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.totalMateriaPrima 
                FROM AppBundle:PlanEstimadoDivisionMateriaPrima e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE d.id =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDivisionCentroCosto);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

}
