<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoCentroCostoMesAmortizacion;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoCentroCostoMesAmortizacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoCentroCostoMesAmortizacionRepository extends EntityRepository
{

    public function graficosAmortizacionEstimadoCentroCostoMensualTodos($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, c.nombre as centro, e.mes,e.totalAmortizacion
                FROM AppBundle:PlanEstimadoCentroCostoMesAmortizacion e 
                JOIN e.divisionCentroCosto d
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $idPlanEstimado);

        return $query->getResult();

    }

    public function graficoTotalesEstimadosCentroCostosAmortizaciones($idPlanEstimado,$idDivision)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre, SUM(e.totalAmortizacion) as totalAmortizacion
                FROM AppBundle:PlanEstimadoCentroCostoMesAmortizacion e
                JOIN e.centroCosto c
                JOIN c.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE d.id =:p1
                AND p.id =:p2
                GROUP BY c.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDivision);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function graficosAmortizacionEstimadoCentroCostoMensual($idPlanEstimado,$CentroCosto)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes,e.totalAmortizacion
                FROM AppBundle:PlanEstimadoCentroCostoMesAmortizacion e 
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE c.id = :p1 
                AND p.id = :p2
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $CentroCosto);
        $query->setParameter('p2' , $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAgregarEstimadoAmortizacionCentroCosto($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //agregar el presupuesto mensual para los Centros de Costos
            $estimadoCentroCosto = $this->agregarTotalEstimadoAmortizacionCentroCosto($data);

            if(is_string($estimadoCentroCosto)) {
                $em->rollback();
                $msg = $estimadoCentroCosto;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Asignar presupuesto mensual para un centro de costo',
                    'descripcion' => 'Se asignó el presupuesto mensual de amortización  a: '.$estimadoCentroCosto->getCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al asignar el presupuesto mensual por Centros de Costos del Plan de Amortización';
        }
        return $msg;
    }

    public function masterModificadorEstimadoAmortizacionCentroCosto($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //Modificar el presupuesto mensual para las divisiones
            $estimadoCentroCosto = $this->modificarTotalEstimadoAmortizacionCentroCosto($data);

            if(is_string($estimadoCentroCosto)) {
                $em->rollback();
                $msg = $estimadoCentroCosto;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Modificar el presupuesto mensual por centro de costo al Plan de Amortización',
                    'descripcion' => 'Se modificó el presupuesto mensual de amortización  a: '.$estimadoCentroCosto->getCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al modificar el presupuesto mensual por centro de costo del Plan de Amortización';
        }
        return $msg;
    }

    public function agregarTotalEstimadoAmortizacionCentroCosto($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoCentroCostoAmortizacion = new PlanEstimadoCentroCostoMesAmortizacion();
            $totalEstimadoCentroCostoAmortizacion->setMes($data['mes']);
            $totalEstimadoCentroCostoAmortizacion->setTotalAmortizacion($data['presupuesto']);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoCentroCostoAmortizacion->setDivisionCentroCosto($divisionCentroCosto);

            $centroCosto = $em->getRepository('AppBundle:CentroCosto')->find($data['centroCosto']);
            $totalEstimadoCentroCostoAmortizacion->setCentroCosto($centroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoCentroCostoAmortizacion->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoCentroCostoAmortizacion);
            $em->flush();
            $msg = $totalEstimadoCentroCostoAmortizacion;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El presupuesto mensual para este centro de costo ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el presupuesto mensual de este centro de costo';
            }
        }
        return $msg;
    }

    public function modificarTotalEstimadoAmortizacionCentroCosto($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $centroCosto = $em->getRepository('AppBundle:CentroCosto')->find($data['centroCosto']);
            $mes = $data['mes'];
            $totalEstimadoCentroCostoAmortizacion = $em->getRepository('AppBundle:PlanEstimadoCentroCostoMesAmortizacion')->findOneBy(array('mes' => $mes,'planEstimadoIndicadores' => $planEstimado, 'centroCosto' => $centroCosto));

            if (!empty($totalEstimadoCentroCostoAmortizacion)) {

                $totalEstimadoCentroCostoAmortizacion->setTotalAmortizacion($data['presupuesto']);

                $em->persist($totalEstimadoCentroCostoAmortizacion);
                $em->flush();
                $msg = $totalEstimadoCentroCostoAmortizacion;
            } else {
                $msg = $totalEstimadoCentroCostoAmortizacion;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el total de presupuesto mensual del centro de costo';
        }

        return $msg;
    }

    public function verificarAprobadoEstimadoAmortizacionCentroCostoMeses($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobarPrespuestoCentroCostoMesAmortizacion
                FROM AppBundle:PlanEstimadoDivisionAmortizacion e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoCentroCostoMesAmortizacion = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    //Funciones para el export
    public function datosExportEstimadoAmortizacionCentroCostoMeses($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, c.nombre as centro, e.mes, e.totalAmortizacion as presupuesto
                FROM AppBundle:PlanEstimadoCentroCostoMesAmortizacion e
                JOIN e.planEstimadoIndicadores p
                JOIN e.centroCosto c
                JOIN c.divisionCentroCosto d
                WHERE p.id = :p1
                ORDER BY d.nombre, c.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportEstimadosCentroCostosAmortizaciones($idPlanEstimado,$idDivision)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre as centro, e.mes, e.totalAmortizacion
                FROM AppBundle:PlanEstimadoCentroCostoMesAmortizacion e
                JOIN e.centroCosto c
                JOIN c.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE d.id =:p1
                AND p.id =:p2
                GROUP BY c.id, e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDivision);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

}
