<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoCentroCostoMateriaPrima;
use Doctrine\ORM\EntityRepository;
use Exception;


/**
 * PlanEstimadoCentroCostoMateriaPrimaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoCentroCostoMateriaPrimaRepository extends EntityRepository
{

    public function graficoTotalesEstimadosCentrosCostosMateriasPrimas($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT d.id, d.nombre as division, c.id as centroId, c.nombre as centro, e.totalMateriaPrima
                FROM AppBundle:PlanEstimadoCentroCostoMateriaPrima e
                JOIN e.divisionCentroCosto d
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAgregarEstimadoMateriaPrimaCentroCosto($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //agregar el presupuesto mensual estimado para los Centros de Costos
            $estimadoCentroCosto = $this->agregarTotalEstimadoMateriaPrimaCentroCosto($data);

            if(is_string($estimadoCentroCosto)) {
                $em->rollback();
                $msg = $estimadoCentroCosto;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Asignar presupuesto estimado para un centro de costo',
                    'descripcion' => 'Se asignó el presupuesto estimado de materia prima a: '.$estimadoCentroCosto->getCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al asignar el presupuesto estimado por Centros de Costos del Plan de Materia Prima';
        }
        return $msg;
    }

    public function masterModificadorEstimadoMateriaPrimaCentroCosto($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //Modificar el presupuesto mensual estimado para las divisiones
            $estimadoCentroCosto = $this->modificarTotalEstimadoMateriaPrimaCentroCosto($data);

            if(is_string($estimadoCentroCosto)) {
                $em->rollback();
                $msg = $estimadoCentroCosto;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Modificar el presupuesto por centro de costo al Plan Estimado de Materias Primas',
                    'descripcion' => 'Se modificó el presupuesto estimado de materia prima  a: '.$estimadoCentroCosto->getCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al modificar el presupuesto estimado por centro de costo del Plan de Materias Primas';
        }
        return $msg;
    }

    public function agregarTotalEstimadoMateriaPrimaCentroCosto($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoCentroCostoMateriaPrima = new PlanEstimadoCentroCostoMateriaPrima();
            $totalEstimadoCentroCostoMateriaPrima->setTotalMateriaPrima($data['presupuesto']);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoCentroCostoMateriaPrima->setDivisionCentroCosto($divisionCentroCosto);

            $centroCosto = $em->getRepository('AppBundle:CentroCosto')->find($data['centroCosto']);
            $totalEstimadoCentroCostoMateriaPrima->setCentroCosto($centroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoCentroCostoMateriaPrima->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoCentroCostoMateriaPrima);
            $em->flush();
            $msg = $totalEstimadoCentroCostoMateriaPrima;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El presupuesto estimado para este centro de costo ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el presupuesto estimado para este centro de costo';
            }
        }
        return $msg;
    }

    public function modificarTotalEstimadoMateriaPrimaCentroCosto($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $centroCosto = $em->getRepository('AppBundle:CentroCosto')->find($data['centroCosto']);

            $totalEstimadoCentroCostoMateriaPrima = $em->getRepository('AppBundle:PlanEstimadoCentroCostoMateriaPrima')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'centroCosto' => $centroCosto));

            if (!empty($totalEstimadoCentroCostoMateriaPrima)) {
                $totalEstimadoCentroCostoMateriaPrima->setTotalMateriaPrima($data['presupuesto']);
                $em->persist($totalEstimadoCentroCostoMateriaPrima);
                $em->flush();
                $msg = $totalEstimadoCentroCostoMateriaPrima;
            } else {
                $msg = $totalEstimadoCentroCostoMateriaPrima;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el presupuesto estimado para este centro de costo';
        }

        return $msg;
    }

    public function obtenerImporteMateriaPrimaCentroCosto($data, $centroCosto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.totalMateriaPrima 
                FROM AppBundle:PlanEstimadoCentroCostoMateriaPrima e
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE c.id =:p1
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $centroCosto);
        $query->setParameter('p2', $data['idPlanEstimado']);

        $total = $query->getResult();

        return $total[0]['totalMateriaPrima'];

    }

    public function datoExportarTotalesEstimadosCentrosCostosMateriasPrimas($idPlanEstimado,$idDivisionCentroCosto)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre as centro, e.totalMateriaPrima
                FROM AppBundle:PlanEstimadoCentroCostoMateriaPrima e
                JOIN e.divisionCentroCosto d
                JOIN e.centroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE d.id =:p1
                AND p.id =:p2
                ORDER BY c.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDivisionCentroCosto);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

}
