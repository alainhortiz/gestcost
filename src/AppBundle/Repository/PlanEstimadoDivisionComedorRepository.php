<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoDivisionComedor;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoDivisionComedorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoDivisionComedorRepository extends EntityRepository
{
    public function totalEstimadoDivisionComedor($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT sum(e.totalComedor) as totalComedor 
                FROM AppBundle:PlanEstimadoDivisionComedor e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['totalComedor'];

    }

    public function graficoTotalesEstimadosDivisionesComedor($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, d.nombre, e.totalComedor
                FROM AppBundle:PlanEstimadoDivisionComedor e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY e.totalComedor DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function agregarTotalEstimadoComedorDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoDivisionComedor = new PlanEstimadoDivisionComedor();
            $totalEstimadoDivisionComedor->setTotalComedor($data['presupuesto']);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoDivisionComedor->setDivisionCentroCosto($divisionCentroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoDivisionComedor->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoDivisionComedor);
            $em->flush();
            $msg = $totalEstimadoDivisionComedor;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El presupuesto de gastos de comedor para esta divisi贸n ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el presupuesto de gastos de comedor para esta divisi贸n';
            }
        }
        return $msg;
    }

    public function modificarTotalEstimadoComedorDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);

            $totalEstimadoDivisionComedor = $em->getRepository('AppBundle:PlanEstimadoDivisionComedor')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($totalEstimadoDivisionComedor)) {

                $totalEstimadoDivisionComedor->setTotalComedor($data['presupuesto']);

                $em->persist($totalEstimadoDivisionComedor);
                $em->flush();
                $msg = $totalEstimadoDivisionComedor;
            } else {
                $msg = $totalEstimadoDivisionComedor;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el presupuesto de gastos de comedor para esta divisi贸n';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesComedor($data)
    {
        try {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['idDivisionCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoDivisionMesComedor = $em->getRepository('AppBundle:PlanEstimadoDivisionComedor')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoDivisionMesComedor)) {

                $aprobarEstimadoDivisionMesComedor->setAprobarPrespuestoDivisionMesComedor(true);

                $em->flush();
                $msg = $aprobarEstimadoDivisionMesComedor;
            } else {
                $msg = $aprobarEstimadoDivisionMesComedor;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por divisiones del Plan de gastos de comedor';
        }

        return $msg;
    }

    public function verificarAprobadoEstimadoComedorDivisionMeses($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobarPrespuestoDivisionMesComedor
                FROM AppBundle:PlanEstimadoDivisionComedor e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesComedor = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    public function cantidadEstimadoDivisionComedor($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadComedorDivision 
                FROM AppBundle:PlanEstimadoDivisionComedor e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadComedorDivision'];

    }

    public function cantidadEstimadoDivisionMesComedor($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadComedorDivisionMes 
                FROM AppBundle:PlanEstimadoDivisionComedor e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesComedor =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadComedorDivisionMes'];

    }

    public function planComedorDivisionUnica($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT d.id, d.nombre 
                FROM AppBundle:PlanEstimadoDivisionComedor e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function verificarAprobadoEstimadoComedorCentroCostoMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, e.aprobarPrespuestoCentroCostoMesComedor as aprobado
                FROM AppBundle:PlanEstimadoDivisionComedor e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoCentroCostoMesComedor = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function aprobarTotalEstimadoCentroCostoComedor($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoCentroCostoComedor = $em->getRepository('AppBundle:PlanEstimadoDivisionComedor')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoCentroCostoComedor)) {

                $aprobarEstimadoCentroCostoComedor->setAprobarPrespuestoCentroCostoMesComedor(true);

                $em->flush();
                $msg = $aprobarEstimadoCentroCostoComedor;
            } else {
                $msg = $aprobarEstimadoCentroCostoComedor;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual para los centros de costos de esta divisi贸n';
        }

        return $msg;
    }

    public function planComedorDivisionUnicaExportar($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT (d.nombre) as division
                FROM AppBundle:PlanEstimadoDivisionComedor e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function planComedorCantidadDivisiones($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.id 
                FROM AppBundle:PlanEstimadoDivisionComedor e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $data['idPlanEstimado']);

        return count($query->getResult());

    }
}
