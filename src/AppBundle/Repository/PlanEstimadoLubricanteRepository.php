<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Exception;
use Symfony\Component\HttpFoundation\Session\Session;

/**
 * PlanEstimadoLubricanteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoLubricanteRepository extends EntityRepository
{

    public function estimadoLubricante($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT l.id, l.nombre, e.lts, e.importe, e.aprobadoEstimadoLubricanteMedioTransporte
                FROM AppBundle:PlanEstimadoLubricante e
                JOIN e.lubricante l
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function verificarAprobadoEstimadoTipoLubricanteMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT t.id as tipoLubricante, e.aprobadoEstimadoLubricanteMedioTransporte as aprobado
                FROM AppBundle:PlanEstimadoLubricante e
                JOIN e.lubricante t
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobadoEstimadoLubricanteMedioTransporte = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAprobarLubricanteMedioTrasporteMensual($data, $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //aprobar el presupuesto  para los Centros de Costos
            $estimadoLubricante = $this->aprobarLubricanteMedioTrasporteMensual($data);

            if (is_string($estimadoLubricante)) {
                $em->rollback();
                $msg = $estimadoLubricante;
                return $msg;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Aprobar la asignación mensual de litros de aceite',
                'descripcion' => 'Se aprobó la asignación mensual de litros de aceite '
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            // verificar si todas las tipos de aceites estan aprobadas
            $verificarLubricante = $this->verificarAprobadoLubricanteMedioTrasporteMensual($data);

            if ($verificarLubricante === 0) {
                $aprobar = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->aprobarTotalEstimadoLubricanteMensual($data);

                if (is_string($aprobar)) {
                    $em->rollback();
                    $msg = $aprobar;
                    return $msg;
                }
                $session = new Session();
                $session->set('aprobadoEstimadoLubricante', $aprobar->getAprobadoEstimadoLubricanteMedioTransporte());
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Aprobar la distribución mensual del aceite',
                'descripcion' => 'Se aprobó la distribución mensual del aceite'
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al aprobar la asignación mensual de litros de aceite';
        }
        return $msg;
    }

    public function aprobarLubricanteMedioTrasporteMensual($data)
    {
        try {
            $em = $this->getEntityManager();
            $tipoLubricante = $em->getRepository('AppBundle:Lubricante')->find($data['tipoLubricante']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoLubricante = $em->getRepository('AppBundle:PlanEstimadoLubricante')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'lubricante' => $tipoLubricante));

            if (!empty($aprobarEstimadoLubricante)) {

                $aprobarEstimadoLubricante->setAprobadoEstimadoLubricanteMedioTransporte(true);

                $em->flush();
                $msg = $aprobarEstimadoLubricante;
            } else {
                $msg = $aprobarEstimadoLubricante;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar la asignación mensual de litros de aceite';
        }

        return $msg;
    }

    public function verificarAprobadoLubricanteMedioTrasporteMensual($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobadoEstimadoLubricanteMedioTransporte
                FROM AppBundle:PlanEstimadoLubricante e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobadoEstimadoLubricanteMedioTransporte = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

}
