<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoDivisionEnergia;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoDivisionEnergiaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoDivisionEnergiaRepository extends EntityRepository
{
    public function totalEstimadoDivisionEnergia($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT sum(e.totalKWDivision) as totalKWDivision 
                FROM AppBundle:PlanEstimadoDivisionEnergia e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['totalKWDivision'];

    }

    public function cantidadEstimadoDivisionEnergia($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadEnergiaDivision 
                FROM AppBundle:PlanEstimadoDivisionEnergia e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadEnergiaDivision'];

    }

    public function cantidadEstimadoDivisionMesEnergia($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadEnergiaDivisionMes 
                FROM AppBundle:PlanEstimadoDivisionEnergia e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesEnergia =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadEnergiaDivisionMes'];

    }

    public function graficoTotalesEstimadosDivisionesEnergias($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre,e.totalKWDivision,e.totalEnergiaPresupuesto
                FROM AppBundle:PlanEstimadoDivisionEnergia e
                JOIN e.divisionCentroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY c.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function verificarAprobadoEstimadoEnergiaCentroCostoMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, e.aprobarPrespuestoCentroCostoMesEnergia as aprobado
                FROM AppBundle:PlanEstimadoDivisionEnergia e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE e.aprobarPrespuestoCentroCostoMesEnergia = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAgregarEstimadoEnergiaDivision($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //agregar el kW mensual para las divisiones
            $estimadoDivision = $this->agregarTotalEstimadoEnergiaDivision($data);

            if(is_string($estimadoDivision)) {
                $em->rollback();
                $msg = $estimadoDivision;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Asignar kW por división al Plan de Energía',
                    'descripcion' => 'Se asignó el total de kW para el consumo de energía a: '.$estimadoDivision->getDivisionCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al aprobar el total de kW por divisiones del Plan de Energía';
        }
        return $msg;
    }

    public function masterModificadorEstimadoEnergiaDivision($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //agregar el presupuesto mensual para las divisiones
            $estimadoDivision = $this->modificarTotalEstimadoEnergiaDivision($data);

            if(is_string($estimadoDivision)) {
                $em->rollback();
                $msg = $estimadoDivision;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Modificar total de kW por división del Plan de Energía',
                    'descripcion' => 'Se modificó el total de kW por división del Plan de Energía a: '.$estimadoDivision->getDivisionCentroCosto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al aprobar el total de kW por divisiones del Plan de Energía';
        }
        return $msg;
    }

    public function agregarTotalEstimadoEnergiaDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoDivisionEnergia = new PlanEstimadoDivisionEnergia();
            $totalEstimadoDivisionEnergia->setTotalKWDivision($data['kW']);
            $totalEstimadoDivisionEnergia->setTotalEnergiaPresupuesto($data['presupuesto']);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoDivisionEnergia->setDivisionCentroCosto($divisionCentroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoDivisionEnergia->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoDivisionEnergia);
            $em->flush();
            $msg = $totalEstimadoDivisionEnergia;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El total de kW de esta división ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el total de kW para esta división';
            }
        }
        return $msg;
    }

    public function modificarTotalEstimadoEnergiaDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);

            $totalEstimadoDivisionEnergia = $em->getRepository('AppBundle:PlanEstimadoDivisionEnergia')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($totalEstimadoDivisionEnergia)) {

                $totalEstimadoDivisionEnergia->setTotalKWDivision($data['kW']);
                $totalEstimadoDivisionEnergia->setTotalEnergiaPresupuesto($data['presupuesto']);

                $em->persist($totalEstimadoDivisionEnergia);
                $em->flush();
                $msg = $totalEstimadoDivisionEnergia;
            } else {
                $msg = $totalEstimadoDivisionEnergia;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el total de kW de la división';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesEnergia($data)
    {
        try {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['idDivisionCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoDivisionMesEnergia = $em->getRepository('AppBundle:PlanEstimadoDivisionEnergia')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoDivisionMesEnergia)) {

                $aprobarEstimadoDivisionMesEnergia->setAprobarPrespuestoDivisionMesEnergia(true);

                $em->flush();
                $msg = $aprobarEstimadoDivisionMesEnergia;
            } else {
                $msg = $aprobarEstimadoDivisionMesEnergia;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar el total de kW mensual por divisiones del Plan de Energía';
        }

        return $msg;
    }

    public function verificarAprobadoEstimadoEnergiaDivisionMeses($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobarPrespuestoDivisionMesEnergia
                FROM AppBundle:PlanEstimadoDivisionEnergia e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesEnergia = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    public function aprobarTotalEstimadoCentroCostoEnergia($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoCentroCostoEnergia = $em->getRepository('AppBundle:PlanEstimadoDivisionEnergia')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoCentroCostoEnergia)) {

                $aprobarEstimadoCentroCostoEnergia->setAprobarPrespuestoCentroCostoMesEnergia(true);

                $em->flush();
                $msg = $aprobarEstimadoCentroCostoEnergia;
            } else {
                $msg = $aprobarEstimadoCentroCostoEnergia;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el total de kW mensual para los centros de costos de esta división';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMesEnergia($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['idDivisionCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoCentroCostoEnergia = $em->getRepository('AppBundle:PlanEstimadoDivisionEnergia')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoCentroCostoEnergia)) {

                $aprobarEstimadoCentroCostoEnergia->setAprobarPrespuestoCentroCostoMesEnergia(true);

                $em->flush();
                $msg = $aprobarEstimadoCentroCostoEnergia;
            } else {
                $msg = $aprobarEstimadoCentroCostoEnergia;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el total de kW mensual por centros de costos del Plan de Energía';
        }

        return $msg;
    }

    public function verificarInicioEstimadoEnergiaCentroCosto($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e
                FROM AppBundle:PlanEstimadoDivisionSalario e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesFondo = :p1
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function planEnergiaDivisionUnica($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT d.id, d.nombre 
                FROM AppBundle:PlanEstimadoDivisionEnergia e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    // Funciones para la exportarción a Excel el Plan
    public function datosExportEstimadoEnergiaDivision($idPlanEstimado,$idDivisionCentroCosto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, e.totalSalarioDivision, e.totalPromedioTrabajador, e.totalGastoSalarioPesoProduccion, e.totalSalarioMedio, e.aprobarPrespuestoDivisionMesFondo, e.aprobarPrespuestoCentroCostoFondo, e.aprobarPrespuestoCentroCostoMesFondo
                FROM AppBundle:PlanEstimadoDivisionSalario e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE d.id = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDivisionCentroCosto);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

}
