<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoDivisionOtroIngreso;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoDivisionOtroIngresoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoDivisionOtroIngresoRepository extends EntityRepository
{
    public function totalEstimadoDivisionOtroIngreso($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT sum(e.totalOtroIngreso) as totalOtroIngreso 
                FROM AppBundle:PlanEstimadoDivisionOtroIngreso e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['totalOtroIngreso'];

    }

    public function cantidadEstimadoDivisionOtroIngreso($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadOtroIngresoDivision 
                FROM AppBundle:PlanEstimadoDivisionOtroIngreso e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadOtroIngresoDivision'];

    }

    public function cantidadEstimadoDivisionMesOtroIngreso($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadOtroIngresoDivisionMes 
                FROM AppBundle:PlanEstimadoDivisionOtroIngreso e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesOtroIngreso =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadOtroIngresoDivisionMes'];

    }

    public function graficoTotalesEstimadosDivisionesOtroIngreso($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, d.nombre, e.totalOtroIngreso
                FROM AppBundle:PlanEstimadoDivisionOtroIngreso e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY e.totalOtroIngreso DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function agregarTotalEstimadoOtroIngresoDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoDivisionOtroIngreso = new PlanEstimadoDivisionOtroIngreso();
            $totalEstimadoDivisionOtroIngreso->setTotalOtroIngreso($data['presupuesto']);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoDivisionOtroIngreso->setDivisionCentroCosto($divisionCentroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoDivisionOtroIngreso->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoDivisionOtroIngreso);
            $em->flush();
            $msg = $totalEstimadoDivisionOtroIngreso;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El presupuesto de otros ingresos para esta división ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el presupuesto de otros ingresos para esta división';
            }
        }
        return $msg;
    }

    public function modificarTotalEstimadoOtroIngresoDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);

            $totalEstimadoDivisionOtroIngreso = $em->getRepository('AppBundle:PlanEstimadoDivisionOtroIngreso')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($totalEstimadoDivisionOtroIngreso)) {

                $totalEstimadoDivisionOtroIngreso->setTotalOtroIngreso($data['presupuesto']);

                $em->persist($totalEstimadoDivisionOtroIngreso);
                $em->flush();
                $msg = $totalEstimadoDivisionOtroIngreso;
            } else {
                $msg = $totalEstimadoDivisionOtroIngreso;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el presupuesto de depreciación para esta división';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesOtroIngreso($data)
    {
        try {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['idDivisionCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoDivisionMesOtroIngreso = $em->getRepository('AppBundle:PlanEstimadoDivisionOtroIngreso')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoDivisionMesOtroIngreso)) {

                $aprobarEstimadoDivisionMesOtroIngreso->setAprobarPrespuestoDivisionMesOtroIngreso(true);

                $em->flush();
                $msg = $aprobarEstimadoDivisionMesOtroIngreso;
            } else {
                $msg = $aprobarEstimadoDivisionMesOtroIngreso;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por divisiones del Plan de Otros Ingresos';
        }

        return $msg;
    }

    public function verificarAprobadoEstimadoOtroIngresoDivisionMeses($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobarPrespuestoDivisionMesOtroIngreso
                FROM AppBundle:PlanEstimadoDivisionOtroIngreso e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesOtroIngreso = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    public function planOtroIngresoDivisionUnica($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT d.id, d.nombre 
                FROM AppBundle:PlanEstimadoDivisionOtroIngreso e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function planOtroIngresoDivisionUnicaExport($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT (d.nombre) as division
                FROM AppBundle:PlanEstimadoDivisionOtroIngreso e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function verificarAprobadoEstimadoOtroIngresoCentroCostoMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, e.aprobarPrespuestoCentroCostoMesOtroIngreso as aprobado
                FROM AppBundle:PlanEstimadoDivisionOtroIngreso e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoCentroCostoMesOtroIngreso = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function aprobarTotalEstimadoCentroCostoOtroIngreso($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoCentroCostoOtroIngreso = $em->getRepository('AppBundle:PlanEstimadoDivisionOtroIngreso')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoCentroCostoOtroIngreso)) {

                $aprobarEstimadoCentroCostoOtroIngreso->setAprobarPrespuestoCentroCostoMesOtroIngreso(true);

                $em->flush();
                $msg = $aprobarEstimadoCentroCostoOtroIngreso;
            } else {
                $msg = $aprobarEstimadoCentroCostoOtroIngreso;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual para los centros de costos de esta división';
        }

        return $msg;
    }

    public function planOtroIngresoCantidadDivisiones($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.id 
                FROM AppBundle:PlanEstimadoDivisionOtroIngreso e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $data['idPlanEstimado']);

        return count($query->getResult());

    }

}
