<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Energia;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * EnergiaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EnergiaRepository extends EntityRepository
{
    public function agregarEnergia($data)
    {
        try{
            $em = $this->getEntityManager();
            $energia = new Energia();
            $energia->setUnidad($data['unidad']);
            $energia->setPrecio($data['precio']);

            $em->persist($energia);
            $em->flush();
            $msg = $energia;

        }catch (Exception $e)
        {
            if(strpos($e->getMessage() , 'Duplicate entry') > 0)
            {
                $msg = 'La unidad de medida de energía ya existe, no se puede agregar';
            }
            else
            {
                $msg = 'Se produjo un error al insertar la unidad de medida de energía';
            }
        }
        return $msg;
    }

    public function modificarEnergia($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $energia = $em->getRepository('AppBundle:Energia')->find($data['idEnergia']);

            if (!empty($energia)) {
                $energia->setUnidad($data['unidad']);
                $energia->setPrecio($data['precio']);

                $em->persist($energia);
                $em->flush();
                $msg = $energia;
            } else {
                $msg = $energia;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar la unidad de medida de energía';
        }

        return $msg;
    }

    public function eliminarEnergia($id)
    {
        try
        {
            $em = $this->getEntityManager();
            $energia = $em->getRepository('AppBundle:Energia')->find($id);

            if (!empty($energia)) {
                $em->remove($energia);
                $em->flush();
                $msg = $energia;
            } else {
                $msg = $energia;
            }

        } catch (Exception $e) {

            if (strpos($e->getMessage(), 'foreign key') > 0) {
                $msg = 'Existen registros asociados a esta unidad de medida de energía, no se puede eliminar';
            } else {
                $msg = 'Se produjo un error al eliminar la unidad de medida de energía';
            }
        }
        return $msg;
    }
}
