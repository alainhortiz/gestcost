<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoDivisionCombustible;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoDivisionCombustibleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoDivisionCombustibleRepository extends EntityRepository
{
    public function totalEstimadoDivisionCombustible($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT sum(e.importe) as totalCombustibleDivision 
                FROM AppBundle:PlanEstimadoDivisionCombustible e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['totalCombustibleDivision'];

    }

    public function cantidadEstimadoDivisionCombustible($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadCombustibleDivision 
                FROM AppBundle:PlanEstimadoDivisionCombustible e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadCombustibleDivision'];

    }

    public function cantidadEstimadoDivisionMesCombustible($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadCombustibleDivisionMes 
                FROM AppBundle:PlanEstimadoDivisionCombustible e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesCombustible =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadCombustibleDivisionMes'];

    }

    public function graficoTotalesEstimadosDivisionesCombustibles($idPlanEstimado)
{

    $em = $this->getEntityManager();

    $dql = 'SELECT d.nombre,e.importe,e.lts,t.nombre as tipo
                FROM AppBundle:PlanEstimadoDivisionCombustible e
                JOIN e.tipoCombustible t
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY d.nombre';

    $query = $em->createQuery($dql);
    $query->setParameter('p1', $idPlanEstimado);

    return $query->getResult();

}

    public function graficoTotalesEstimadosImporteDivision($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division,sum(e.importe) as totalImporte
                FROM AppBundle:PlanEstimadoDivisionCombustible e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                GROUP BY d.nombre
                ORDER BY totalImporte DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function graficoTotalesEstimadosTipoCombustibleDivisiones($idPlanEstimado,$division)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT t.nombre as tipoCombustible, e.lts, e.importe, e.aprobarPrespuestoCentroCostoCombustible 
                FROM AppBundle:PlanEstimadoDivisionCombustible e
                JOIN e.tipoCombustible t
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE d.nombre =:p1
                AND p.id =:p2
                GROUP BY t.nombre
                ORDER BY e.lts DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $division);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function totalEstimadoTipoCombustibleDivision($idPlanEstimado,$tipo,$division)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.importe
                FROM AppBundle:PlanEstimadoDivisionCombustible e
                JOIN e.tipoCombustible t
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE t.nombre =:p1
                AND d.nombre =:p2
                AND p.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $tipo);
        $query->setParameter('p2', $division);
        $query->setParameter('p3', $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAgregarEstimadoCombustibleDivision($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //agregar el presupuesto mensual para las divisiones
            $estimadoDivision = $this->agregarTotalEstimadoCombustibleDivision($data);

            if(is_string($estimadoDivision)) {
                $em->rollback();
                $msg = $estimadoDivision;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Asignar el combustible a la división: '.$estimadoDivision->getDivisionCentroCosto()->getNombre(),
                    'descripcion' => 'Se asignó el tipo de combustible: '.$estimadoDivision->getTipoCombustible()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al asignar el combustible por divisiones';
        }
        return $msg;
    }

    public function agregarTotalEstimadoCombustibleDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoDivisionCombustible = new PlanEstimadoDivisionCombustible();
            $totalEstimadoDivisionCombustible->setLts($data['lts']);
            $totalEstimadoDivisionCombustible->setPrecio($data['precio']);
            $totalEstimadoDivisionCombustible->setImporte($data['importe']);

            $tipoCombustible = $em->getRepository('AppBundle:TipoCombustible')->find($data['tipoCombustible']);
            $totalEstimadoDivisionCombustible->setTipoCombustible($tipoCombustible);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoDivisionCombustible->setDivisionCentroCosto($divisionCentroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoDivisionCombustible->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoDivisionCombustible);
            $em->flush();
            $msg = $totalEstimadoDivisionCombustible;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'La asignación de combustible de esta división ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el combustible de esta división';
            }
        }
        return $msg;
    }

    public function masterModificadorEstimadoCombustibleDivision($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //modificar el presupuesto mensual para las divisiones
            $estimadoDivision = $this->modificarTotalEstimadoCombustibleDivision($data);

            if(is_string($estimadoDivision)) {
                $em->rollback();
                $msg = $estimadoDivision;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Modificar el combustible a la división: '.$estimadoDivision->getDivisionCentroCosto()->getNombre(),
                    'descripcion' => 'Se modificó el tipo de combustible: '.$estimadoDivision->getTipoCombustible()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al modificar el combustible de esta división';
        }
        return $msg;
    }

    public function modificarTotalEstimadoCombustibleDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $tipoCombustible = $em->getRepository('AppBundle:TipoCombustible')->find($data['tipoCombustible']);

            $totalEstimadoDivisionCombustible = $em->getRepository('AppBundle:PlanEstimadoDivisionCombustible')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto, 'tipoCombustible' => $tipoCombustible));

            if (!empty($totalEstimadoDivisionCombustible)) {

                $totalEstimadoDivisionCombustible->setLts($data['lts']);
                $totalEstimadoDivisionCombustible->setPrecio($data['precio']);
                $totalEstimadoDivisionCombustible->setImporte($data['importe']);

                $em->flush();
                $msg = $totalEstimadoDivisionCombustible;
            } else {
                $msg = $totalEstimadoDivisionCombustible;
            }

        } catch (Exception $e) {
            $msg = $e->getMessage();
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesCombustible($data)
    {
        try {
            $em = $this->getEntityManager();
            $tipoCombustible = $em->getRepository('AppBundle:TipoCombustible')->find($data['tipoCombustible']);
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['idDivisionCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoDivisionMesCombustible = $em->getRepository('AppBundle:PlanEstimadoDivisionCombustible')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto, 'tipoCombustible' => $tipoCombustible));

            if (!empty($aprobarEstimadoDivisionMesCombustible)) {

                $aprobarEstimadoDivisionMesCombustible->setAprobarPrespuestoDivisionMesCombustible(true);

                $em->flush();
                $msg = $aprobarEstimadoDivisionMesCombustible;
            } else {
                $msg = $aprobarEstimadoDivisionMesCombustible;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar el tipo de combustible mensual por divisiones del Plan de Distribución del Combustible';
        }

        return $msg;
    }

    public function verificarAprobadoEstimadoCombustibleDivisionMeses($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobarPrespuestoDivisionMesCombustible
                FROM AppBundle:PlanEstimadoDivisionCombustible e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesCombustible = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    // Datos para exportar a Excel
    public function datosExportPlanEstimadoDivisionCombustible($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, t.nombre as tipoCombustible, e.lts,e.precio, e.importe 
                FROM AppBundle:PlanEstimadoDivisionCombustible e
                JOIN e.tipoCombustible t
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY d.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }
}
