<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoMesOtrosGastos;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoMesOtrosGastosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoMesOtrosGastosRepository extends EntityRepository
{
    public function graficosOtroGastoEstimadoMensual($idPlanEstimado,$otroGasto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes,e.totalOtroGasto
                FROM AppBundle:PlanEstimadoMesOtrosGastos e 
                JOIN e.otroGasto c
                JOIN e.planEstimadoIndicadores p
                WHERE c.id = :p1 
                AND p.id = :p2
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $otroGasto);
        $query->setParameter('p2' , $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAgregarEstimadoOtroGastoMes($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //agregar el presupuesto mensual para las divisiones
            $estimadoOtroGastoMes = $this->agregarEstimadoOtroGastoMes($data);

            if(is_string($estimadoOtroGastoMes)) {
                $em->rollback();
                $msg = $estimadoOtroGastoMes;
            } else {
                // aprobar la distribucion mensual para esta division
                $em->getRepository('AppBundle:PlanEstimadoOtrosGastos')->aprobarTotalEstimadoMesOtroGasto($data);
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Asignar el presupuesto mensual por servicio al Plan de Otros Gastos',
                    'descripcion' => 'Se asignÃ³ el presupuesto mensual a: '.$estimadoOtroGastoMes->getOtroGasto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por servicios del Plan de Otros Gastos';
        }
        return $msg;
    }

    public function agregarEstimadoOtroGastoMes($data)
    {
        try {
            $em = $this->getEntityManager();

            $otroGasto = $em->getRepository('AppBundle:OtroGasto')->find($data['idOtroGasto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            foreach ($data['presupuesto'] as $registro) {
                $totalEstimadoOtroGastoMes = new PlanEstimadoMesOtrosGastos();
                $totalEstimadoOtroGastoMes->setMes($registro['mes']);
                $totalEstimadoOtroGastoMes->setTotalOtroGasto($registro['presupuesto']);
                $totalEstimadoOtroGastoMes->setOtroGasto($otroGasto);
                $totalEstimadoOtroGastoMes->setPlanEstimadoIndicadores($planEstimado);
                $em->persist($totalEstimadoOtroGastoMes);
            }

            $em->flush();
            $msg = $totalEstimadoOtroGastoMes;


        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0)
            {
                $msg = 'El presupuesto mensual para este servicio ya existe, no se puede agregar';
            }
            else
            {
                $msg = 'Se produjo un error al asignar el presupuesto mensual para este servicio';
            }
        }
        return $msg;
    }

    public function graficosOtroGastoEstimadoMensualTodos($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.id as otroGasto, e.mes, e.totalOtroGasto
                FROM AppBundle:PlanEstimadoMesOtrosGastos e 
                JOIN e.otroGasto c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $idPlanEstimado);

        return $query->getResult();

    }

    public function graficosOtroGastoEstimadoMensualAgrupado($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes, SUM(e.totalOtroGasto) as totalOtroGasto
                FROM AppBundle:PlanEstimadoMesOtrosGastos e 
                JOIN e.otroGasto c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                GROUP BY e.mes
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $idPlanEstimado);

        return $query->getResult();

    }

    ///Funciones para el Export
    public function datosExportEstimadoOtrosGastosMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre as otroGasto, e.mes, e.totalOtroGasto
                FROM AppBundle:PlanEstimadoMesOtrosGastos e 
                JOIN e.otroGasto c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportTipoServicioMensual($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT t.nombre as tipoServicio, e.mes, SUM(e.totalOtroGasto) as totalOtroGasto
                FROM AppBundle:PlanEstimadoMesOtrosGastos e 
                JOIN e.otroGasto o
                JOIN o.tipoServicio t
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                GROUP BY t.nombre, e.mes
                ORDER BY t.id, e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $idPlanEstimado);

        return $query->getResult();

    }

}
