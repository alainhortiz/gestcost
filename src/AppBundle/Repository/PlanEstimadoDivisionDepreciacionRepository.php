<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoDivisionDepreciacion;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoDivisionDepreciacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoDivisionDepreciacionRepository extends EntityRepository
{
    public function totalEstimadoDivisionDepreciacion($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT sum(e.totalDepreciacion) as totalDepreciacion 
                FROM AppBundle:PlanEstimadoDivisionDepreciacion e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['totalDepreciacion'];

    }

    public function graficoTotalesEstimadosDivisionesDepreciacion($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, d.nombre, e.totalDepreciacion
                FROM AppBundle:PlanEstimadoDivisionDepreciacion e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY e.totalDepreciacion DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function agregarTotalEstimadoDepreciacionDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoDivisionDepreciacion = new PlanEstimadoDivisionDepreciacion();
            $totalEstimadoDivisionDepreciacion->setTotalDepreciacion($data['presupuesto']);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoDivisionDepreciacion->setDivisionCentroCosto($divisionCentroCosto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoDivisionDepreciacion->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoDivisionDepreciacion);
            $em->flush();
            $msg = $totalEstimadoDivisionDepreciacion;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El presupuesto de depreciación para esta división ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el presupuesto de depreciación para esta división';
            }
        }
        return $msg;
    }

    public function modificarTotalEstimadoDepreciacionDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);

            $totalEstimadoDivisionDepreciacion = $em->getRepository('AppBundle:PlanEstimadoDivisionDepreciacion')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($totalEstimadoDivisionDepreciacion)) {

                $totalEstimadoDivisionDepreciacion->setTotalDepreciacion($data['presupuesto']);

                $em->persist($totalEstimadoDivisionDepreciacion);
                $em->flush();
                $msg = $totalEstimadoDivisionDepreciacion;
            } else {
                $msg = $totalEstimadoDivisionDepreciacion;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el presupuesto de depreciación para esta división';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesDepreciacion($data)
    {
        try {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['idDivisionCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoDivisionMesDepreciacion = $em->getRepository('AppBundle:PlanEstimadoDivisionDepreciacion')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoDivisionMesDepreciacion)) {

                $aprobarEstimadoDivisionMesDepreciacion->setAprobarPrespuestoDivisionMesDepreciacion(true);

                $em->flush();
                $msg = $aprobarEstimadoDivisionMesDepreciacion;
            } else {
                $msg = $aprobarEstimadoDivisionMesDepreciacion;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por divisiones del Plan de Depreciación';
        }

        return $msg;
    }

    public function verificarAprobadoEstimadoDepreciacionDivisionMeses($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobarPrespuestoDivisionMesDepreciacion
                FROM AppBundle:PlanEstimadoDivisionDepreciacion e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesDepreciacion = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    public function cantidadEstimadoDivisionDepreciacion($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadDepreciacionDivision 
                FROM AppBundle:PlanEstimadoDivisionDepreciacion e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadDepreciacionDivision'];

    }

    public function cantidadEstimadoDivisionMesDepreciacion($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT count(e.divisionCentroCosto) as cantidadDepreciacionDivisionMes 
                FROM AppBundle:PlanEstimadoDivisionDepreciacion e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesDepreciacion =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['cantidadDepreciacionDivisionMes'];

    }

    public function planDepreciacionDivisionUnica($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT d.id, d.nombre 
                FROM AppBundle:PlanEstimadoDivisionDepreciacion e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function verificarAprobadoEstimadoDepreciacionCentroCostoMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.id as division, e.aprobarPrespuestoCentroCostoMesDepreciacion as aprobado
                FROM AppBundle:PlanEstimadoDivisionDepreciacion e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoCentroCostoMesDepreciacion = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function aprobarTotalEstimadoCentroCostoDepreciacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoCentroCostoDepreciacion = $em->getRepository('AppBundle:PlanEstimadoDivisionDepreciacion')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($aprobarEstimadoCentroCostoDepreciacion)) {

                $aprobarEstimadoCentroCostoDepreciacion->setAprobarPrespuestoCentroCostoMesDepreciacion(true);

                $em->flush();
                $msg = $aprobarEstimadoCentroCostoDepreciacion;
            } else {
                $msg = $aprobarEstimadoCentroCostoDepreciacion;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual para los centros de costos de esta división';
        }

        return $msg;
    }

    public function planDepreciacionDivisionUnicaExportar($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT (d.nombre) as division
                FROM AppBundle:PlanEstimadoDivisionDepreciacion e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function planDepreciacionCantidadDivisiones($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.id 
                FROM AppBundle:PlanEstimadoDivisionDepreciacion e
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $data['idPlanEstimado']);

        return count($query->getResult());

    }

}
