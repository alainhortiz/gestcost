<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoIndicadores;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoIndicadoresRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoIndicadoresRepository extends EntityRepository
{
    public function yearActivo()
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e
                FROM AppBundle:PlanEstimadoIndicadores e 
                WHERE e.aprobado = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , false);

        return $query->getResult();
    }

    public function iniciarPlanEstimado($year)
    {
        try{
            $em = $this->getEntityManager();
            $planEstimado = new PlanEstimadoIndicadores();
            $planEstimado->setYear($year);
            $planEstimado->setInicio(true);

            $em->persist($planEstimado);
            $em->flush();
            $msg = $planEstimado;

        }catch (Exception $e)
        {
            if(strpos($e->getMessage() , 'Duplicate entry') > 0)
            {
                $msg = 'El Plan ya estÃ¡ iniciado, no se puede iniciar';
            }
            else
            {
                $msg = 'Se produjo un error al iniciar el Plan';
            }
        }
        return $msg;
    }

    public function aprobarPlanEstimado($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {
                $planEstimado->setAprobado(true);

                $em->persist($planEstimado);
                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el Plan';
        }

        return $msg;
    }

    public function graficoTotales()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.year,e.totalVenta,e.totalOtroIngreso,e.totalFondoSalario,e.totalOtrosGastos,e.totalLtsCombustible, e.totalLtsLubricante, e.totalEnergiaPresupuesto, e.totalEnergiaKW, e.totalMateriaPrima, e.totalDepreciacion, e.totalAmortizacion, e.totalBonificacion, e.totalComedor
                FROM AppBundle:PlanEstimadoIndicadores e
                ORDER BY e.year DESC';

        return $em->createQuery($dql)->getResult();

    }

    public function agregarTotalEstimadoVenta($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalVenta($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al asignar el presupuesto del Plan de Ventas';
        }

        return $msg;
    }

    public function modificarTotalEstimadoVenta($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalVenta($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar el presupuesto del Plan de Ventas';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoVenta($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoTotalVenta(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto del Plan de Ventas';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionVenta($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionVenta(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto por divisiones del Plan de Ventas';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesVenta($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionMesVenta(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por divisiones del Plan de Ventas';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMesVenta($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoCentroCostoMesVenta(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el plan de ventas mensual por centros de costos';
        }

        return $msg;
    }

    public function agregarTotalFondoSalario($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalFondoSalario($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al asignar el presupuesto de Recursos Humanos';
        }

        return $msg;
    }

    public function modificarTotalFondoSalario($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalFondoSalario($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar el presupuesto de Recursos Humanos';
        }

        return $msg;
    }

    public function aprobarTotalFondoSalario($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoTotalRecursosHumanos(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto de recursos humanos';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionFondo($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionRecursosHumanos(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto por divisiones del Plan de Recursos Humanos';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesFondo($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionMesRecursosHumanos(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por divisiones del Plan de Recursos humanos';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMesFondo($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoCentroCostoMesRecursosHumanos(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el plan de ventas mensual por centros de costos';
        }

        return $msg;
    }

    public function agregarTotalOtroIngreso($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalOtroIngreso($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al asignar el presupuesto de otros ingresos';
        }

        return $msg;
    }

    public function modificarTotalOtroIngreso($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalOtroIngreso($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar el presupuesto de otros ingresos';
        }

        return $msg;
    }

    public function aprobarTotalOtroIngreso($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoTotalOtroIngreso(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto de otros ingresos';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionOtroIngreso($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionOtroIngreso(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto por divisiones del Plan de Otros Ingresos';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesOtroIngreso($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionOtroIngreso(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por divisiones del Plan de Otros Ingresos';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMesOtroIngreso($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoCentroCostoOtroIngreso(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por centros de costos del Plan de Otros Ingresos';
        }

        return $msg;
    }

    public function agregarTotalOtrosGastos($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalOtrosGastos($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al asignar el presupuesto de otros gastos monetarios';
        }

        return $msg;
    }

    public function modificarTotalOtrosGastos($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalOtrosGastos($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar el presupuesto de otros gastos monetarios';
        }

        return $msg;
    }

    public function aprobarTotalOtrosGastos($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoTotalOtrosGastos(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto de otros gastos';
        }

        return $msg;
    }

    public function agregarTotalCombustible($data, $totalLts)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $ltsAnterior = $planEstimado->getTotalLtsCombustible();
                $ltsTotal = $ltsAnterior + $totalLts;
                $planEstimado->setTotalLtsCombustible($ltsTotal);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al asignar el total de litros para el combustible';
        }

        return $msg;
    }

    public function agregarTotalLubricante($data, $totalLts)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $ltsAnterior = $planEstimado->getTotalLtsLubricante();
                $ltsTotal = $ltsAnterior + $totalLts;
                $planEstimado->setTotalLtsLubricante($ltsTotal);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al asignar el total de litros para el aceite';
        }

        return $msg;
    }

    public function modificarTotalCombustible($data, $ltsAnterior, $totalLts)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $ltsActual = $planEstimado->getTotalLtsCombustible();
                $ltsActual -= $ltsAnterior;
                $ltsTotal = $ltsActual + $totalLts;
                $planEstimado->setTotalLtsCombustible($ltsTotal);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar el total de litros para el combustible';
        }

        return $msg;
    }

    public function modificarTotalLubricante($data, $ltsAnterior, $totalLts)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $ltsActual = $planEstimado->getTotalLtsLubricante();
                $ltsActual -= $ltsAnterior;
                $ltsTotal = $ltsActual + $totalLts;
                $planEstimado->setTotalLtsLubricante($ltsTotal);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar el total de litros para el aceite';
        }

        return $msg;
    }

    public function aprobarTotalCombustible($idPlanEstimado)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($idPlanEstimado);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoTotalCombustible(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar los litros para el combustible';
        }

        return $msg;
    }

    public function aprobarTotalLubricante($idPlanEstimado)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($idPlanEstimado);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoTotalLubricante(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar los litros para el aceite';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionCombustible($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionCombustible(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto por divisiones del Plan de DistribuciÃ³n del Combustible';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesCombustible($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionMesCombustible(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el combustible mensual por divisiones del Plan de DistribuciÃ³n del Combustible';
        }

        return $msg;
    }

    public function agregarTotalEnergia($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $precio = $em->getRepository('AppBundle:Energia')->findAll();

            if (!$precio) {
                $presupuesto = 0;
                $msg = 'Debe establecer el precio del kW para asignar el presupuesto para el consumo de energÃ­a';
            } else {
                $presupuesto = (float) ($data['kW'] * $precio[0]->getPrecio());
            }

            if ($presupuesto !== 0 && !empty($planEstimado)) {

                $planEstimado->setTotalEnergiaPresupuesto($presupuesto);
                $planEstimado->setPrecioEnergia($precio[0]->getPrecio());
                $planEstimado->setTotalEnergiaKW($data['kW']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al asignar el presupuesto para el consumo de energÃ­a';
        }

        return $msg;
    }

    public function modificarTotalEnergia($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $precio = $em->getRepository('AppBundle:Energia')->findAll();

            if (!$precio) {
                $presupuesto = 0;
                $msg = 'Debe establecer el precio del kW para asignar el presupuesto para el consumo de energÃ­a';
            } else {
                $presupuesto = (float) ($data['kW'] * $precio[0]->getPrecio());
            }

            if ($presupuesto !== 0 && !empty($planEstimado)) {

                $planEstimado->setTotalEnergiaPresupuesto($presupuesto);
                $planEstimado->setPrecioEnergia($precio[0]->getPrecio());
                $planEstimado->setTotalEnergiaKW($data['kW']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar el presupuesto para el consumo de energÃ­a';
        }

        return $msg;
    }

    public function aprobarTotalEnergia($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoTotalEnergia(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto para el consumo de energÃ­a';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionEnergia($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionEnergia(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el total de kW por divisiones del Plan de EnergÃ­a';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesEnergia($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionMesEnergia(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el total de kW mensual por divisiones del Plan de EnergÃ­a';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMesEnergia($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoCentroCostoMesEnergia(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por centros de costos del Plan de EnergÃ­a';
        }

        return $msg;
    }

    public function precioKW($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.precioEnergia
                FROM AppBundle:PlanEstimadoIndicadores e
                WHERE e.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['precioEnergia'];

    }

    public function totalEstimadoKWEnergia($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.totalEnergiaKW 
                FROM AppBundle:PlanEstimadoIndicadores e
                WHERE e.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['totalEnergiaKW'];

    }

    public function totalPresupuestoEstimadoOtroGasto($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.totalOtrosGastos 
                FROM AppBundle:PlanEstimadoIndicadores e
                WHERE e.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        $total = $query->getResult();

        return $total[0]['totalOtrosGastos'];

    }

    public function aprobarTotalEstimadoOtroGasto($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoOtrosGastos(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto por servicios del Plan de Otros Gastos';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoMesOtroGasto($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoMesOtrosGastos(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por servicios del Plan de Otros Gastos';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesOtroGasto($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionMesOtrosGastos(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual de los servicios para las divisiones del Plan de Otros Gastos';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMesOtroGasto($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoCentroCostoMesOtrosGastos(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual de los servicios para los centros de costos del Plan de Otros Gastos';
        }

        return $msg;
    }

    public function agregarTotalMateriaPrima($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalMateriaPrima($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al asignar el presupuesto de materias primas';
        }

        return $msg;
    }

    public function modificarTotalMateriaPrima($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalMateriaPrima($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar el presupuesto de materias primas';
        }

        return $msg;
    }

    public function aprobarTotalMateriaPrima($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoTotalMateriaPrima(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto de materias primas';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMateriaPrima($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionMateriaPrima(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto por divisiones del Plan de Materias Primas';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMateriaPrima($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoCentroCostoMateriaPrima(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto por centros de costos del Plan de Materias Primas';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMesMateriaPrima($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoCentroCostoMateriaPrima(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por centros de costos del Plan de materias primas';
        }

        return $msg;
    }

    public function agregarTotalDepreciacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalDepreciacion($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al asignar el presupuesto de depreciaciÃ³n';
        }

        return $msg;
    }

    public function modificarTotalDepreciacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalDepreciacion($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar el presupuesto de depreciaciÃ³n';
        }

        return $msg;
    }

    public function aprobarTotalDepreciacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoTotalDepreciacion(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto de depreciaciÃ³n';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionDepreciacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionDepreciacion(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto por divisiones del Plan de DepreciaciÃ³n';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesDepreciacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionDepreciacion(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por divisiones del Plan de DepreciaciÃ³n';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMesDepreciacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoCentroCostoDepreciacion(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por centros de costos del Plan de DepreciaciÃ³n';
        }

        return $msg;
    }

    public function agregarTotalBonificacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalBonificacion($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al asignar el presupuesto de bonificaciÃ³n';
        }

        return $msg;
    }

    public function modificarTotalBonificacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalBonificacion($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar el presupuesto de bonificaciÃ³n';
        }

        return $msg;
    }

    public function aprobarTotalBonificacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoTotalBonificacion(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto de bonificaciÃ³n';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionBonificacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionBonificacion(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto por divisiones del Plan de BonificaciÃ³n';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesBonificacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionBonificacion(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por divisiones del Plan de BonificaciÃ³n';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMesBonificacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoCentroCostoBonificacion(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por centros de costos del Plan de BonificaciÃ³n';
        }

        return $msg;
    }

    public function agregarTotalComedor($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalComedor($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al asignar el presupuesto de gastos de comedor';
        }

        return $msg;
    }

    public function modificarTotalComedor($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalComedor($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar el presupuesto de gastos de comedor';
        }

        return $msg;
    }

    public function aprobarTotalComedor($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoTotalComedor(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto de gastos de comedor';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionComedor($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionComedor(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto por divisiones del Plan de gastos de comedor';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesComedor($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionComedor(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por divisiones del Plan de gastos de comedor';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMesComedor($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoCentroCostoComedor(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por centros de costos del Plan de gastos de comedor';
        }

        return $msg;
    }

    public function agregarTotalAmortizacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalAmortizacion($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al asignar el presupuesto de amortizaciÃ³n';
        }

        return $msg;
    }

    public function modificarTotalAmortizacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setTotalAmortizacion($data['presupuesto']);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al modificar el presupuesto de amortizaciÃ³n';
        }

        return $msg;
    }

    public function aprobarTotalAmortizacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoTotalAmortizacion(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto de amortizaciÃ³n';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionAmortizacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionAmortizacion(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto por divisiones del Plan de AmortizaciÃ³n';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoDivisionMesAmortizacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoDivisionAmortizacion(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por divisiones del Plan de AmortizaciÃ³n';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCentroCostoMesAmortizacion($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobarPrespuestoCentroCostoAmortizacion(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por centros de costos del Plan de AmortizaciÃ³n';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoCombustibleMensual($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobadoEstimadoCombustibleMedioTransporte(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar la distribuciÃ³n mensual del combustible.';
        }

        return $msg;
    }

    public function aprobarTotalEstimadoLubricanteMensual($data)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            if (!empty($planEstimado)) {

                $planEstimado->setAprobadoEstimadoLubricanteMedioTransporte(true);

                $em->flush();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al aprobar la distribuciÃ³n mensual del aceite.';
        }

        return $msg;
    }

    //Inicializar Procesos del Plan
    public function inicializarProcesos($data,$idPlanEstimado)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try
        {
            if ($data['ventas'] === '1') {
                $ventas = $this->inicializarVentas($idPlanEstimado);
                if(is_string($ventas)) {
                    $em->rollback();
                    return $ventas;
                }
            }
            if ($data['otrosIngresos'] === '1') {
                $otrosIngresos = $this->inicializarOtrosIngresos($idPlanEstimado);
                if(is_string($otrosIngresos)) {
                    $em->rollback();
                    return $otrosIngresos;
                }
            }
            if ($data['salario'] === '1') {
                $salario = $this->inicializarSalario($idPlanEstimado);
                if(is_string($salario)) {
                    $em->rollback();
                    return $salario;
                }
            }
            if ($data['combustible'] === '1') {
                $combustible = $this->inicializarCombustible($idPlanEstimado);
                if(is_string($combustible)) {
                    $em->rollback();
                    return $combustible;
                }
            }
            if ($data['aceite'] === '1') {
                $aceite = $this->inicializarAceite($idPlanEstimado);
                if(is_string($aceite)) {
                    $em->rollback();
                    return $aceite;
                }
            }
            if ($data['energia'] === '1') {
                $energia = $this->inicializarEnergia($idPlanEstimado);
                if(is_string($energia)) {
                    $em->rollback();
                    return $energia;
                }
            }
            if ($data['otrosGastos'] === '1') {
                $otrosGastos = $this->inicializarOtrosGastos($idPlanEstimado);
                if(is_string($otrosGastos)) {
                    $em->rollback();
                    return $otrosGastos;
                }
            }
            if ($data['materiasPrimas'] === '1') {
                $materiasPrimas = $this->inicializarMateriasPrimas($idPlanEstimado);
                if(is_string($materiasPrimas)) {
                    $em->rollback();
                    return $materiasPrimas;
                }
            }
            if ($data['depreciacion'] === '1') {
                $depreciacion = $this->inicializarDepreciacion($idPlanEstimado);
                if(is_string($depreciacion)) {
                    $em->rollback();
                    return $depreciacion;
                }
            }
            if ($data['bonificacion'] === '1') {
                $bonificacion = $this->inicializarBonificacion($idPlanEstimado);
                if(is_string($bonificacion)) {
                    $em->rollback();
                    return $bonificacion;
                }
            }
            if ($data['comedor'] === '1') {
                $comedor = $this->inicializarComedor($idPlanEstimado);
                if(is_string($comedor)) {
                    $em->rollback();
                    return $comedor;
                }
            }

            $em->commit();
            $msg = 'ok';

        } catch (Exception $e) {
                $em->rollback();
                $msg = $e->getMessage();
        }
        return $msg;
    }

    //Inicializar Ventas
    public function inicializarVentas($idPlanEstimado)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($idPlanEstimado);

            if (!empty($planEstimado)) {
                $planEstimado->setTotalVenta(0);
                $planEstimado->setAprobarPrespuestoTotalVenta(false);
                $planEstimado->setAprobarPrespuestoDivisionVenta(false);
                $planEstimado->setAprobarPrespuestoDivisionMesVenta(false);
                $planEstimado->setAprobarPrespuestoCentroCostoMesVenta(false);
                $em->flush();
                $db = $em->getConnection();
                $query = $db->prepare('DELETE FROM plan_estimado_centro_costo_mes');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_division_mes');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_division');
                $query->execute();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al inicializar el proceso de ventas del plan.';
        }

        return $msg;
    }

    //Inicializar OtrosIngresos
    public function inicializarOtrosIngresos($idPlanEstimado)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($idPlanEstimado);

            if (!empty($planEstimado)) {
                $planEstimado->setTotalOtroIngreso(0);
                $planEstimado->setAprobarPrespuestoDivisionOtroIngreso(false);
                $planEstimado->setAprobarPrespuestoCentroCostoOtroIngreso(false);
                $planEstimado->setAprobarPrespuestoTotalOtroIngreso(false);
                $em->flush();
                $db = $em->getConnection();
                $query = $db->prepare('DELETE FROM plan_estimado_centro_costo_mes_otro_ingreso');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_division_mes_otro_ingreso');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_division_otro_ingreso');
                $query->execute();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al inicializar el proceso de Otros Ingresos del plan.';
        }

        return $msg;
    }

    //Inicializar Salario
    public function inicializarSalario($idPlanEstimado)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($idPlanEstimado);

            if (!empty($planEstimado)) {
                $planEstimado->setTotalFondoSalario(0);
                $planEstimado->setAprobarPrespuestoTotalRecursosHumanos(false);
                $planEstimado->setAprobarPrespuestoDivisionRecursosHumanos(false);
                $planEstimado->setAprobarPrespuestoDivisionMesRecursosHumanos(false);
                $planEstimado->setAprobarPrespuestoCentroCostoMesRecursosHumanos(false);
                $em->flush();
                $db = $em->getConnection();
                $query = $db->prepare('DELETE FROM plan_estimado_division_salario');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_division_mes_salario');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_centro_costo_mes_salario');
                $query->execute();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al inicializar el proceso de Salario del plan.';
        }

        return $msg;
    }

    //Inicializar Combustible
    public function inicializarCombustible($idPlanEstimado)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($idPlanEstimado);

            if (!empty($planEstimado)) {
                $planEstimado->setTotalCombustible(0);
                $planEstimado->setTotalLtsCombustible(0);
                $planEstimado->setAprobarPrespuestoTotalCombustible(false);
                $planEstimado->setAprobadoEstimadoCombustibleMedioTransporte(false);
                $em->flush();
                $db = $em->getConnection();
                $query = $db->prepare('DELETE FROM plan_estimado_combustible');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_mes_combustible');
                $query->execute();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al inicializar el proceso de Combustible del plan.';
        }

        return $msg;
    }

    //Inicializar Aceite
    public function inicializarAceite($idPlanEstimado)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($idPlanEstimado);

            if (!empty($planEstimado)) {
                $planEstimado->setTotalLtsLubricante(0);
                $planEstimado->setTotalLubricante(0);
                $planEstimado->setAprobarPrespuestoTotalLubricante(false);
                $planEstimado->setAprobadoEstimadoLubricanteMedioTransporte(false);
                $em->flush();
                $db = $em->getConnection();
                $query = $db->prepare('DELETE FROM plan_estimado_lubricante');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_mes_lubricante');
                $query->execute();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al inicializar el proceso de Aceites del plan.';
        }

        return $msg;
    }

    //Inicializar Energia
    public function inicializarEnergia($idPlanEstimado)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($idPlanEstimado);

            if (!empty($planEstimado)) {
                $planEstimado->setTotalEnergiaPresupuesto(0);
                $planEstimado->setPrecioEnergia(0);
                $planEstimado->settotalEnergiaKW(0);
                $planEstimado->setAprobarPrespuestoTotalEnergia(false);
                $planEstimado->setAprobarPrespuestoDivisionEnergia(false);
                $planEstimado->setAprobarPrespuestoDivisionMesEnergia(false);
                $planEstimado->setAprobarPrespuestoCentroCostoMesEnergia(false);
                $em->flush();
                $db = $em->getConnection();
                $query = $db->prepare('DELETE FROM plan_estimado_division_mes_energia');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_division_energia');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_centro_costo_mes_energia');
                $query->execute();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al inicializar el proceso de EnergÃ­a del plan.';
        }

        return $msg;
    }

    //Inicializar OtrosGastos
    public function inicializarOtrosGastos($idPlanEstimado)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($idPlanEstimado);

            if (!empty($planEstimado)) {
                $planEstimado->setTotalOtrosGastos(0);
                $planEstimado->setAprobarPrespuestoTotalOtrosGastos(false);
                $planEstimado->setAprobarPrespuestoOtrosGastos(false);
                $planEstimado->setAprobarPrespuestoDivisionMesOtrosGastos(false);
                $planEstimado->setAprobarPrespuestoCentroCostoMesOtrosGastos(false);
                $em->flush();
                $db = $em->getConnection();
                $query = $db->prepare('DELETE FROM plan_estimado_division_mes_otros_gastos');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_centro_costo_mes_otros_gastos');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_division_otros_gastos');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_mes_otros_gastos');
                $query->execute();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al inicializar el proceso de Otros Gastos del plan.';
        }

        return $msg;
    }

    //Inicializar MateriasPrimas
    public function inicializarMateriasPrimas($idPlanEstimado)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($idPlanEstimado);

            if (!empty($planEstimado)) {
                $planEstimado->setTotalMateriaPrima(0);
                $planEstimado->setAprobarPrespuestoDivisionMateriaPrima(false);
                $planEstimado->setAprobarPrespuestoCentroCostoMateriaPrima(false);
                $planEstimado->setAprobarPrespuestoTotalMateriaPrima(false);
                $em->flush();
                $db = $em->getConnection();
                $query = $db->prepare('DELETE FROM plan_estimado_division_mes_materia_prima');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_centro_costo_materia_prima');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_division_materia_prima');
                $query->execute();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al inicializar el proceso de Materias Primas del plan.';
        }

        return $msg;
    }

    //Inicializar DepreciaciÃ³n
    public function inicializarDepreciacion($idPlanEstimado)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($idPlanEstimado);

            if (!empty($planEstimado)) {
                $planEstimado->setTotalDepreciacion(0);
                $planEstimado->setAprobarPrespuestoDivisionDepreciacion(false);
                $planEstimado->setAprobarPrespuestoCentroCostoDepreciacion(false);
                $planEstimado->setAprobarPrespuestoTotalDepreciacion(false);
                $em->flush();
                $db = $em->getConnection();
                $query = $db->prepare('DELETE FROM plan_estimado_division_depreciacion');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_division_mes_depreciacion');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_centro_costo_mes_depreciacion');
                $query->execute();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al inicializar el proceso de DepreciaciÃ³n del plan.';
        }

        return $msg;
    }

    //Inicializar BonificaciÃ³n
    public function inicializarBonificacion($idPlanEstimado)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($idPlanEstimado);

            if (!empty($planEstimado)) {
                $planEstimado->setTotalBonificacion(0);
                $planEstimado->setAprobarPrespuestoDivisionBonificacion(false);
                $planEstimado->setAprobarPrespuestoCentroCostoBonificacion(false);
                $planEstimado->setAprobarPrespuestoTotalBonificacion(false);
                $em->flush();
                $db = $em->getConnection();
                $query = $db->prepare('DELETE FROM plan_estimado_division_bonificacion');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_division_mes_bonificacion');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_centro_costo_mes_bonificacion');
                $query->execute();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al inicializar el proceso de bonificaciÃ³n del plan.';
        }

        return $msg;
    }

    //Inicializar Gastos de Comedor
    public function inicializarComedor($idPlanEstimado)
    {
        try
        {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($idPlanEstimado);

            if (!empty($planEstimado)) {
                $planEstimado->setTotalComedor(0);
                $planEstimado->setAprobarPrespuestoDivisionComedor(false);
                $planEstimado->setAprobarPrespuestoCentroCostoComedor(false);
                $planEstimado->setAprobarPrespuestoTotalComedor(false);
                $em->flush();
                $db = $em->getConnection();
                $query = $db->prepare('DELETE FROM plan_estimado_division_comedor');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_division_mes_comedor');
                $query->execute();
                $query = $db->prepare('DELETE FROM plan_estimado_centro_costo_mes_comedor');
                $query->execute();
                $msg = $planEstimado;
            } else {
                $msg = $planEstimado;
            }

        }catch (Exception $e)
        {
            $msg = 'Se produjo un error al inicializar el proceso de gastos de comedor del plan.';
        }

        return $msg;
    }

}
