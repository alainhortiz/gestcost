<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoMesCombustible;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoMesCombustibleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoMesCombustibleRepository extends EntityRepository
{
    public function presupuestoTipoCombustibleMedio($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.id, t.id as idTransporte,m.id as modeloId, r.id as idTipoTransporte, m.nombre as modeloNombre, c.id as tipoCombustibleId, c.nombre as tipoCombustibleNombre ,SUM(e.ltsCombustible) as ltsCombustible, SUM(e.importeCombustible) as importeCombustible, t.matricula, o.nombre as centro, d.nombre as division, t.isLubricante
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.modeloTransporte m
                JOIN m.tipoTransporte r
                JOIN t.tipoCombustible c
                JOIN t.centroCosto o
                JOIN o.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                GROUP BY t.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function presupuestoTipoCombustibleMedioMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.id, e.mes, t.id as idTransporte,m.id as modeloId, r.id as idTipoTransporte, m.nombre as modeloNombre, c.id as tipoCombustibleId, c.nombre as tipoCombustibleNombre ,e.ltsCombustible, e.importeCombustible, t.matricula, o.nombre as centro, d.nombre as division, t.isLubricante
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.modeloTransporte m
                JOIN m.tipoTransporte r
                JOIN t.tipoCombustible c
                JOIN t.centroCosto o
                JOIN o.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function presupuestoTipoCombustibleMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes, c.id as tipoCombustibleId, c.nombre as tipoCombustibleNombre ,SUM(e.ltsCombustible) as ltsCombustible, SUM(e.importeCombustible) as importeCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.tipoCombustible c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                GROUP BY c.id,e.mes
                ORDER BY c.id,e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function presupuestoTipoCombustibleMedioCantMeses($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT t.id as idTransporte,count(e) as cantidad
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                GROUP BY t.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();
    }

    public function presupuestoTipoCombustibleMedioMeses($idPlanEstimado, $transporte)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes,e.precioCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN e.planEstimadoIndicadores p
                WHERE t.id =:p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $transporte);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();
    }

    public function masterAgregarTotalCombustibleMedioTransporteMes($data, $meses, $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            if ($data['mes'] === '') {
                //agregar el
                $agregarCombustible = $this->agregarEstimadoCombustibleMes($data, $meses);
            } else {
                //agregar el
                $agregarCombustible = $this->agregarEstimadoCombustibleUnMes($data);
            }

            if (is_string($agregarCombustible)) {
                $em->rollback();
                return $agregarCombustible;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Asignación mensual del total estimado de litros de combustible por tipo de combustible',
                'descripcion' => 'Se asignó el total mensual de litros estimados de combustible para el transporte: '
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);


            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al asignar el total de litros a este medio de transporte';
        }
        return $msg;
    }

    public function agregarEstimadoCombustibleMes($data, $meses)
    {
        try {
            $em = $this->getEntityManager();

            $trasporte = $em->getRepository('AppBundle:Transporte')->find($data['transporte']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);


            foreach ($meses as $mes) {
                $totalEstimadoCombustible = new PlanEstimadoMesCombustible();
                $totalEstimadoCombustible->setMes($mes['mes']);
                $totalEstimadoCombustible->setLtsCombustible($data['ltsCombustible']);
                $totalEstimadoCombustible->setPrecioCombustible((float) $mes['precio']);

                $importeCombustible = (float)($data['ltsCombustible'] * $mes['precio']);

                $totalEstimadoCombustible->setImporteCombustible($importeCombustible);
                $totalEstimadoCombustible->setTransporte($trasporte);
                $totalEstimadoCombustible->setPlanEstimadoIndicadores($planEstimado);
                $em->persist($totalEstimadoCombustible);
            }

            $em->flush();
            $msg = $totalEstimadoCombustible;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'La asignación del total de litros de combustible a este medio de transporte ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el total de litros de combustible a este medio de transporte';
            }
        }
        return $msg;
    }

    public function agregarEstimadoCombustibleUnMes($data)
    {
        try {
            $em = $this->getEntityManager();

            $totalEstimadoCombustible = new PlanEstimadoMesCombustible();
            $totalEstimadoCombustible->setMes($data['mes']);
            $totalEstimadoCombustible->setLtsCombustible($data['ltsCombustible']);
            $importeCombustible = (float)($data['ltsCombustible'] * $data['precioCombustible']);

            $totalEstimadoCombustible->setImporteCombustible($importeCombustible);

            $trasporte = $em->getRepository('AppBundle:Transporte')->find($data['transporte']);
            $totalEstimadoCombustible->setTransporte($trasporte);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoCombustible->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoCombustible);
            $em->flush();
            $msg = $totalEstimadoCombustible;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'La asignación del total de litros de combustible a este medio de transporte ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el total de litros de combustible a este medio de transporte';
            }
        }
        return $msg;
    }

    public function masterModificarTotalCombustibleMedioTransporteMes($data, $meses, $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            if ($data['mes'] === '') {
                //agregar el
                $modificarCombustible = $this->modificarEstimadoCombustibleMes($data, $meses);
            } else {
                //agregar el
                $modificarCombustible = $this->modificarEstimadoCombustibleUnMes($data, $meses);
            }

            if (is_string($modificarCombustible)) {
                $em->rollback();
                return $modificarCombustible;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Modificar el total de  litros de combustible mensuales por tipo de combustible',
                'descripcion' => 'Se modificó el total mensual de litros de combustibles para el transporte: '
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);


            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al modificar el total de litros de combustible a este medio de transporte';
        }
        return $msg;
    }

    public function modificarEstimadoCombustibleMes($data, $meses)
    {
        try {
            $em = $this->getEntityManager();

            $trasporte = $em->getRepository('AppBundle:Transporte')->find($data['transporte']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $totalEstimadoCombustible = $em->getRepository('AppBundle:PlanEstimadoMesCombustible')->findBy(array('planEstimadoIndicadores' => $planEstimado, 'transporte' => $trasporte));

            if (!empty($totalEstimadoCombustible)) {

                foreach ($totalEstimadoCombustible as $mes) {
                    $em->remove($mes);
                }

                $em->flush();

                foreach ($meses as $mes) {
                    $totalEstimadoCombustible = new PlanEstimadoMesCombustible();
                    $totalEstimadoCombustible->setMes($mes['mes']);
                    $totalEstimadoCombustible->setLtsCombustible($data['ltsCombustible']);

                    $importeCombustible = (float)($data['ltsCombustible'] * $mes['precioCombustible']);

                    $totalEstimadoCombustible->setImporteCombustible($importeCombustible);
                    $totalEstimadoCombustible->setTransporte($trasporte);
                    $totalEstimadoCombustible->setPlanEstimadoIndicadores($planEstimado);
                    $em->persist($totalEstimadoCombustible);
                }
                $em->flush();
                $msg = $totalEstimadoCombustible;
            } else {
                $msg = $totalEstimadoCombustible;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el total de litros de combustible a este medio de transporte';
        }

        return $msg;

    }

    public function modificarEstimadoCombustibleUnMes($data, $meses)
    {
        try {
            $em = $this->getEntityManager();

            $trasporte = $em->getRepository('AppBundle:Transporte')->find($data['transporte']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $mesSeleccionado = $data['mes'];

            $totalEstimadoCombustible = $em->getRepository('AppBundle:PlanEstimadoMesCombustible')->findOneBy(array('mes' => $mesSeleccionado,'planEstimadoIndicadores' => $planEstimado, 'transporte' => $trasporte));

            if (!empty($totalEstimadoCombustible)) {

                foreach ($meses as $mes) {

                    if ($mesSeleccionado === $mes['mes']){
                        $totalEstimadoCombustible->setLtsCombustible($data['ltsCombustible']);

                        $importeCombustible = (float)($data['ltsCombustible'] * $mes['precioCombustible']);

                        $totalEstimadoCombustible->setImporteCombustible($importeCombustible);

                        $em->flush();
                    }
                }
                $msg = $totalEstimadoCombustible;
            } else {
                $msg = $totalEstimadoCombustible;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el total de litros de combustible a este medio de transporte';
        }

        return $msg;

    }

    public function planCombustibleDivisionUnicaExportar($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT (d.nombre) as division
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.centroCosto c
                JOIN c.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportEstimadoCombustibleDivisionMeses($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, e.mes, SUM(e.importeCombustible) as importeCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.centroCosto f
                JOIN f.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                GROUP BY d.nombre,e.mes
                ORDER BY d.nombre,e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportEstimadoCombustibleCentroCostoMeses($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, c.nombre as centro, e.mes, SUM(e.importeCombustible) as importeCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.centroCosto c
                JOIN c.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                GROUP BY d.nombre,c.nombre,e.mes
                ORDER BY d.nombre,c.nombre,e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportEstimadoCombustibleDivisionTipoCombustible($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, c.nombre as tipoCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.tipoCombustible c
                JOIN t.centroCosto f
                JOIN f.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                GROUP BY d.nombre,c.nombre
                ORDER BY d.id,c.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportEstimadoCombustibleDivisionTipoCombustibleMeses($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, c.nombre as tipoCombustible, e.mes, SUM(e.ltsCombustible) as ltsCombustible, SUM(e.importeCombustible) as importeCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.tipoCombustible c
                JOIN t.centroCosto f
                JOIN f.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                GROUP BY d.nombre,c.nombre,e.mes
                ORDER BY d.nombre,c.nombre,e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportPresupuestoTipoCombustibleMedioCentro($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, c.nombre as tipoCombustible, o.nombre as centro, SUM(e.ltsCombustible) as ltsCombustible, SUM(e.importeCombustible) as importeCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.modeloTransporte m
                JOIN m.tipoTransporte r
                JOIN t.tipoCombustible c
                JOIN t.centroCosto o
                JOIN o.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                GROUP BY d.nombre, c.nombre, o.nombre
                ORDER BY d.id, c.id, o.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportPresupuestoLubricanteMedioCentro($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, o.nombre as centro, SUM(e.ltsLubricante) as ltsLubricante, SUM(e.importeLubricante) as importeLubricante
                FROM AppBundle:PlanEstimadoMesLubricante e
                JOIN e.transporte t
                JOIN t.centroCosto o
                JOIN o.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE e.ltsLubricante <>:p1
                AND p.id =:p2
                GROUP BY d.nombre, o.nombre
                ORDER BY d.id, o.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 0);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportPresupuestoLubricanteMedioCentroMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, o.nombre as centro, e.mes, SUM(e.ltsLubricante) as ltsLubricante, SUM(e.importeLubricante) as importeLubricante
                FROM AppBundle:PlanEstimadoMesLubricante e
                JOIN e.transporte t
                JOIN t.centroCosto o
                JOIN o.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE e.ltsLubricante <>:p1
                AND p.id =:p2
                GROUP BY d.nombre, o.nombre, e.mes
                ORDER BY d.id, o.id, e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 0);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportPresupuestoTipoCombustibleMedioCentroMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, c.nombre as tipoCombustible, o.nombre as centro, e.mes, SUM(e.ltsCombustible) as ltsCombustible, SUM(e.importeCombustible) as importeCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.modeloTransporte m
                JOIN m.tipoTransporte r
                JOIN t.tipoCombustible c
                JOIN t.centroCosto o
                JOIN o.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                GROUP BY d.nombre, c.nombre, o.nombre, e.mes
                ORDER BY d.id, c.id, o.id, e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportPresupuestoTipoCombustibleMedio($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, c.nombre as tipoCombustible, o.nombre as centro, t.id as idTransporte, m.nombre as modeloNombre, t.matricula, SUM(e.ltsCombustible) as ltsCombustible, SUM(e.importeCombustible) as importeCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.modeloTransporte m
                JOIN m.tipoTransporte r
                JOIN t.tipoCombustible c
                JOIN t.centroCosto o
                JOIN o.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                GROUP BY d.nombre, c.nombre, o.nombre, t.id, m.nombre, t.matricula
                ORDER BY d.id, c.id, o.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportPresupuestoMedioLubricante($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, o.nombre as centro, t.id as idTransporte, m.nombre as modeloNombre, t.matricula
                FROM AppBundle:PlanEstimadoMesLubricante e
                JOIN e.transporte t
                JOIN t.modeloTransporte m
                JOIN t.centroCosto o
                JOIN o.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE e.ltsLubricante <>:p1
                AND p.id =:p2
                GROUP BY d.nombre, o.nombre, t.id, m.nombre, t.matricula
                ORDER BY d.id, o.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 0);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportPresupuestoTipoCombustibleMedioMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, c.nombre as tipoCombustible, t.id as idTransporte, m.nombre as modeloNombre, t.matricula, e.ltsCombustible, e.importeCombustible, o.nombre as centro, e.mes 
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.modeloTransporte m
                JOIN m.tipoTransporte r
                JOIN t.tipoCombustible c
                JOIN t.centroCosto o
                JOIN o.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                ORDER BY d.nombre, c.nombre, o.nombre, e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportPresupuestoLubricanteMedioMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, o.nombre, e.mes, t.id as idTransporte, m.nombre as modeloNombre, t.matricula
                FROM AppBundle:PlanEstimadoMesLubricante e
                JOIN e.transporte t
                JOIN t.modeloTransporte m
                JOIN t.centroCosto o
                JOIN o.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE e.ltsLubricante <>:p1
                AND p.id =:p2
                ORDER BY d.id, o.id, e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 0);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportEstimadoCombustibleDivisionLubricantes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, SUM(e.ltsLubricante) as ltsLubricante, SUM(e.importeLubricante) as importeLubricante
                FROM AppBundle:PlanEstimadoMesLubricante e
                JOIN e.transporte t
                JOIN t.tipoCombustible c
                JOIN t.centroCosto f
                JOIN f.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                GROUP BY d.nombre
                ORDER BY d.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportEstimadoCombustibleDivisionLubricantesMeses($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, e.mes, SUM(e.ltsLubricante) as ltsLubricante, SUM(e.importeLubricante) as importeLubricante
                FROM AppBundle:PlanEstimadoMesLubricante e
                JOIN e.transporte t
                JOIN t.tipoCombustible c
                JOIN t.centroCosto f
                JOIN f.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                GROUP BY d.nombre, e.mes
                ORDER BY d.nombre, e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportPresupuestoTipoCombustibleProvinciaAgrupado($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre as tipoCombustible, v.nombre as provincia
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.tipoCombustible c
                JOIN t.centroCosto o
                JOIN o.provincia v
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                GROUP BY c.nombre, v.nombre
                ORDER BY c.id, v.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportPresupuestoTipoCombustibleProvinciaMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre as tipoCombustible, v.nombre as provincia, o.codigo, e.mes, SUM(e.ltsCombustible) as ltsCombustible, SUM(e.importeCombustible) as importeCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.tipoCombustible c
                JOIN t.centroCosto o
                JOIN o.provincia v
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                GROUP BY c.nombre, v.nombre, e.mes
                ORDER BY c.id, v.id, e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportPresupuestoProvinciaAgrupadoAceite($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT v.nombre as provincia
                FROM AppBundle:PlanEstimadoMesLubricante e
                JOIN e.transporte t
                JOIN t.centroCosto o
                JOIN o.provincia v
                JOIN e.planEstimadoIndicadores p
                WHERE e.ltsLubricante <>:p1
                AND p.id =:p2
                GROUP BY v.nombre
                ORDER BY v.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 0);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportPresupuestoProvinciaMesAceite($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT v.nombre as provincia, o.codigo, e.mes, SUM(e.ltsLubricante) as ltsLubricante, SUM(e.importeLubricante) as importeLubricante
                FROM AppBundle:PlanEstimadoMesLubricante e
                JOIN e.transporte t
                JOIN t.tipoCombustible c
                JOIN t.centroCosto o
                JOIN o.provincia v
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1
                GROUP BY v.nombre, e.mes
                ORDER BY v.id, e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function graficosTipoCombustibleMedio($idPlanEstimado,$tipoCombustible)
{

    $em = $this->getEntityManager();

    if ($tipoCombustible === 'Aceites y Lubricantes' ) {
        $dql = 'SELECT m.nombre as modeloNombre, t.matricula, SUM(e.ltsLubricante) as ltsCombustible
                FROM AppBundle:PlanEstimadoMesLubricante e
                JOIN e.transporte t
                JOIN t.modeloTransporte m
                JOIN e.planEstimadoIndicadores p
                WHERE e.ltsLubricante <>:p1
                AND p.id =:p2
                GROUP BY m.nombre, t.matricula
                ORDER BY e.ltsLubricante DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , 0);
        $query->setParameter('p2' , $idPlanEstimado);
    } else {
        $dql = 'SELECT m.nombre as modeloNombre, t.matricula, SUM(e.ltsCombustible) as ltsCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.tipoCombustible c
                JOIN t.modeloTransporte m
                JOIN e.planEstimadoIndicadores p
                WHERE c.nombre =:p1
                AND p.id =:p2
                GROUP BY m.nombre, t.matricula
                ORDER BY e.ltsCombustible DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $tipoCombustible);
        $query->setParameter('p2' , $idPlanEstimado);
    }

    return $query->getResult();

}

    public function graficosTipoCombustibleMedioMes($idPlanEstimado, $tipoCombustible, $matricula)
    {

        $em = $this->getEntityManager();

        if ($tipoCombustible === 'Aceites y Lubricantes' ) {
            $dql = 'SELECT e.mes, e.ltsLubricante as ltsCombustible
                FROM AppBundle:PlanEstimadoMesLubricante e
                JOIN e.transporte t
                JOIN e.planEstimadoIndicadores p
                WHERE t.matricula =:p1
                AND p.id =:p2
                ORDER BY e.id';
        } else {
            $dql = 'SELECT e.mes, e.ltsCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN e.planEstimadoIndicadores p
                WHERE t.matricula =:p1
                AND p.id =:p2
                ORDER BY e.id';
        }

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $matricula);
        $query->setParameter('p2' , $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportEstimadoCombustibleDivisionMes($idPlanEstimado,$division)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes, SUM(e.importeCombustible) as importeCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.tipoCombustible c
                JOIN t.centroCosto f
                JOIN f.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE d.id =:p1
                AND p.id = :p2
                GROUP BY e.mes
                ORDER BY e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $division);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportEstimadoCombustibleCentroMes($idPlanEstimado,$division)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as centro, e.mes, SUM(e.importeCombustible) as importeCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.tipoCombustible c
                JOIN t.centroCosto f
                JOIN f.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE d.id =:p1
                AND p.id = :p2
                GROUP BY f.nombre, e.mes
                ORDER BY f.id, e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $division);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function graficoEstimadoCombustibleMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes, SUM(e.importeCombustible) as importeCombustible
                FROM AppBundle:PlanEstimadoMesCombustible e
                JOIN e.transporte t
                JOIN t.tipoCombustible c
                JOIN t.centroCosto f
                JOIN f.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                GROUP BY e.mes
                ORDER BY e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

}
