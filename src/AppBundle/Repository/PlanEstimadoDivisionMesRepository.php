<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoDivisionMes;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoDivisionMesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoDivisionMesRepository extends EntityRepository
{
    public function masterAgregarEstimadoVentaDivisionMes($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{
            //agregar el presupuesto mensual para las divisiones
            $estimadoDivisionMes = $this->agregarEstimadoVentaDivisionMes($data);

            // aprobar la distribucion mensual para esta division
            $em->getRepository('AppBundle:PlanEstimadoDivision')->aprobarTotalEstimadoDivisionMesVenta($data);

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Asignar presupuesto mensual por división al Plan de Venta',
                'descripcion' => 'Se asignó el total del presupuesto mensual a: '.$estimadoDivisionMes->getDivisionCentroCosto()->getNombre()
            );
            $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
            $em->commit();
            $msg = 'ok';

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al aprobar el presupuesto mensual por divisiones del Plan de Ventas';
        }
        return $msg;
    }

    public function agregarEstimadoVentaDivisionMes($data)
    {
        try {
            $em = $this->getEntityManager();

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['idDivisionCentroCosto']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            foreach ($data['presupuesto'] as $registro) {
                $totalEstimadoDivisionMes = new PlanEstimadoDivisionMes();
                $totalEstimadoDivisionMes->setMes($registro['mes']);
                $totalEstimadoDivisionMes->setTotalVentaDivisionMes($registro['presupuesto']);
                $totalEstimadoDivisionMes->setDivisionCentroCosto($divisionCentroCosto);
                $totalEstimadoDivisionMes->setPlanEstimadoIndicadores($planEstimado);
                $em->persist($totalEstimadoDivisionMes);
            }

            $em->flush();
            $msg = $totalEstimadoDivisionMes;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0)
            {
                $msg = 'El total del presupuesto mensual para esta división ya existe, no se puede agregar';
            }
            else
            {
                $msg = 'Se produjo un error al asignar el presupuesto mensual para esta división';
            }
        }
        return $msg;
    }

    public function graficosVentaEstimadoDivisionMensual($idPlanEstimado,$division)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes,e.totalVentaDivisionMes 
                FROM AppBundle:PlanEstimadoDivisionMes e 
                JOIN e.divisionCentroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE c.id = :p1 
                AND p.id = :p2
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $division);
        $query->setParameter('p2' , $idPlanEstimado);

        return $query->getResult();

    }

    public function progresoVentaEstimadoDivisionMensual($idPlanEstimado,$division)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes, SUM(e.totalVentaDivisionMes) as totalPresupuesto
                FROM AppBundle:PlanEstimadoDivisionMes e 
                JOIN e.divisionCentroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE c.id = :p1 
                AND p.id = :p2
                GROUP BY e.mes
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $division);
        $query->setParameter('p2' , $idPlanEstimado);

        return $query->getResult();

    }

    public function graficoTotalesEstimadosMesesVentas($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes,SUM(e.totalVentaDivisionMes) as presupuesto
                FROM AppBundle:PlanEstimadoDivisionMes e 
                JOIN e.divisionCentroCosto c
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                GROUP BY e.mes
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $idPlanEstimado);

        return $query->getResult();

    }

    public function estimadoVentaDivisionMensualUnica($idPlanEstimado,$idDivisionCentroCosto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes, e.totalVentaDivisionMes as presupuesto
                FROM AppBundle:PlanEstimadoDivisionMes e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE d.id = :p1 
                AND p.id = :p2
                ORDER BY e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDivisionCentroCosto);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    // Funciones para la exportarción a Excel el Plan
    public function datosExportEstimadoVentaDivisionMes($idPlanEstimado,$idDivisionCentroCosto)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, e.mes, e.totalVentaDivisionMes
                FROM AppBundle:PlanEstimadoDivisionMes e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE d.id = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDivisionCentroCosto);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportEstimadoVentaDivisionMeses($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT d.nombre as division, e.mes, e.totalVentaDivisionMes as presupuesto
                FROM AppBundle:PlanEstimadoDivisionMes e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datosExportEstimadoVentaDivisionUnica($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT (d.nombre) as division
                FROM AppBundle:PlanEstimadoDivisionMes e
                JOIN e.planEstimadoIndicadores p
                JOIN e.divisionCentroCosto d
                WHERE p.id = :p1
                ORDER BY d.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }
}
