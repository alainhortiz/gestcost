<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoCombustible;
use AppBundle\Entity\PlanEstimadoLubricante;
use Doctrine\ORM\EntityRepository;
use Exception;
use Symfony\Component\HttpFoundation\Session\Session;

/**
 * PlanEstimadoCombustibleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoCombustibleRepository extends EntityRepository
{
    public function estimadoTipoCombustible($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT t.id, t.nombre, e.lts, e.importe, e.aprobadoEstimadoCombustibleMedioTransporte 
                FROM AppBundle:PlanEstimadoCombustible e
                JOIN e.tipoCombustible t
                JOIN e.planEstimadoIndicadores p
                WHERE p.id =:p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAgregarTotalCombustible($data, $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //agregar la cantidad de litros por tipo de combustible
            $agregarCombustible = $this->agregarEstimadoCombustible($data);

            if (is_string($agregarCombustible)) {
                $em->rollback();
                $msg = $agregarCombustible;
                return $msg;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Asignación del total de  litros por tipo de combustible',
                'descripcion' => 'Se asignó el total de litros para el tipo de combustible: ' . $agregarCombustible->getTipoCombustible()->getNombre()
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);
            $totalLts = $agregarCombustible->getLts();

            // agregar el total de litros
            $agregarPresupuestoCombustible = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->agregarTotalCombustible($data, $totalLts);

            if (is_string($agregarPresupuestoCombustible)) {
                $em->rollback();
                $msg = $agregarPresupuestoCombustible;
                return $msg;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Agregar el total de litros estimados para combustible',
                'descripcion' => 'Se agregó el total de litros estimados para combustible'
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            $session = new Session();
            $session->set('totalEstimadoCombustible', $agregarPresupuestoCombustible->getTotalLtsCombustible());

            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al asignar el total de litros estimados para este tipo de combustible';
        }
        return $msg;
    }

    public function agregarEstimadoCombustible($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoCombustible = new PlanEstimadoCombustible();
            $totalEstimadoCombustible->setLts($data['lts']);
            $ltsMensual = (int)($data['lts'] / 12);
            $totalEstimadoCombustible->setLtsMensual($ltsMensual);

            $tipoCombustible = $em->getRepository('AppBundle:TipoCombustible')->find($data['tipoCombustible']);
            $totalEstimadoCombustible->setTipoCombustible($tipoCombustible);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoCombustible->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoCombustible);
            $em->flush();
            $msg = $totalEstimadoCombustible;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'La asignación del total de litros de este tipo de combustible ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el total de litros de este tipo de combustible';
            }
        }
        return $msg;
    }

    public function masterAgregarTotalLubricante($data, $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //agregar la cantidad de litros de aceite y lubricante
            $agregarLubricante = $this->agregarEstimadoLubricante($data);

            if (is_string($agregarLubricante)) {
                $em->rollback();
                $msg = $agregarLubricante;
                return $msg;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Asignación del total de litros de aceites y lubricantes',
                'descripcion' => 'Se asignó el total de litros de aceites y lubricantes'
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);
            $totalLts = $agregarLubricante->getLts();

            // agregar el total de litros de aceite
            $agregarPresupuestoLubricante = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->agregarTotalLubricante($data, $totalLts);

            if (is_string($agregarPresupuestoLubricante)) {
                $em->rollback();
                $msg = $agregarPresupuestoLubricante;
                return $msg;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Agregar el total de litros para el lubricante',
                'descripcion' => 'Se agregó el total de litros para el lubricante'
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            $session = new Session();
            $session->set('totalEstimadoLubricante', $agregarPresupuestoLubricante->getTotalLtsLubricante());


            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al asignar el total de litros estimados para este tipo de combustible';
        }
        return $msg;
    }

    public function agregarEstimadoLubricante($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoLubricante = new PlanEstimadoLubricante();
            $totalEstimadoLubricante->setLts($data['lts']);
            $ltsMensual = (int)($data['lts'] / 12);
            $totalEstimadoLubricante->setLtsMensual($ltsMensual);

            $tipoLubricante = $em->getRepository('AppBundle:Lubricante')->find($data['tipoLubricante']);
            $totalEstimadoLubricante->setLubricante($tipoLubricante);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoLubricante->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoLubricante);
            $em->flush();
            $msg = $totalEstimadoLubricante;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'La asignación del total de litros de aceites y lubricantes ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el total de litros de aceites y lubricantes';
            }
        }
        return $msg;
    }

    public function masterModificarTotalCombustible($data, $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            $ltsAnterior = $data['ltsAnterior'];

            //modificar la cantidad de litros por tipo de combustible
            $modificarCombustible = $this->modificarEstimadoCombustible($data);

            if (is_string($modificarCombustible)) {
                $em->rollback();
                $msg = $modificarCombustible;
                return $msg;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Modificación del total de  litros por tipo de combustible',
                'descripcion' => 'Se modificó el total de litros para el tipo de combustible: ' . $modificarCombustible->getTipoCombustible()->getNombre()
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);
            $totalLts = $modificarCombustible->getLts();
            // Modifcar el total de litros estimados para el combustible
            $modificarPresupuestoCombustible = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->modificarTotalCombustible($data, $ltsAnterior, $totalLts);

            if (is_string($modificarPresupuestoCombustible)) {
                $em->rollback();
                $msg = $modificarPresupuestoCombustible;
                return $msg;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Modificar el total de litros estimados para el combustible',
                'descripcion' => 'Se modificó el total de litros estimados para el combustible'
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            $session = new Session();
            $session->set('totalEstimadoCombustible', $modificarPresupuestoCombustible->getTotalLtsCombustible());

            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al modificar el total de litros estimados para este tipo de combustible';
        }
        return $msg;
    }

    public function modificarEstimadoCombustible($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $tipoCombustible = $em->getRepository('AppBundle:TipoCombustible')->find($data['tipoCombustible']);
            $totalEstimadoCombustible = $em->getRepository('AppBundle:PlanEstimadoCombustible')->findOneBy(array('tipoCombustible' => $tipoCombustible, 'planEstimadoIndicadores' => $planEstimado));

            if (!empty($totalEstimadoCombustible)) {

                $totalEstimadoCombustible->setLts($data['lts']);

                $em->persist($totalEstimadoCombustible);
                $em->flush();
                $msg = $totalEstimadoCombustible;
            } else {
                $msg = $totalEstimadoCombustible;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el total de litros de este tipo de combustible';
        }

        return $msg;
    }

    public function masterModificarTotalLubricante($data, $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            $ltsAnterior = $data['ltsAnterior'];

            ///modificar la cantidad de litros de aceites y lubricantes
            $modificarLubricante = $this->modificarEstimadoLubricante($data);

            if (is_string($modificarLubricante)) {
                $em->rollback();
                $msg = $modificarLubricante;
                return $msg;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Modificación del total de litros de aceites y lubricantes',
                'descripcion' => 'Se modificó el total de litros de aceites y lubricantes'
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);
            $totalLts = $modificarLubricante->getLts();

            // modificar el total de litros estimados para el aceite
            $modificarPresupuestoLubricante = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->modificarTotalLubricante($data, $ltsAnterior, $totalLts);

            if (is_string($modificarPresupuestoLubricante)) {
                $em->rollback();
                $msg = $modificarPresupuestoLubricante;
                return $msg;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Modificar el total de litros estimados apar el aceite',
                'descripcion' => 'Se modificó el total de litros estimados apar el aceite'
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            $session = new Session();
            $session->set('totalEstimadoLubricante', $modificarPresupuestoLubricante->getTotalLtsLubricante());


            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al modificar el total de litros estimados para este tipo de combustible';
        }
        return $msg;
    }

    public function modificarEstimadoLubricante($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $tipoLubricante = $em->getRepository('AppBundle:Lubricante')->find($data['tipoLubricante']);
            $totalEstimadoLubricante = $em->getRepository('AppBundle:PlanEstimadoLubricante')->findOneBy(array('lubricante' => $tipoLubricante, 'planEstimadoIndicadores' => $planEstimado));

            if (!empty($totalEstimadoLubricante)) {

                $totalEstimadoLubricante->setLts($data['lts']);

                $em->persist($totalEstimadoLubricante);
                $em->flush();
                $msg = $totalEstimadoLubricante;
            } else {
                $msg = $totalEstimadoLubricante;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el total de litros de aceites y lubricantes';
        }

        return $msg;
    }

    public function verificarAprobadoEstimadoTipoCombustibleMes($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT t.id as tipoCombustible, e.aprobadoEstimadoCombustibleMedioTransporte as aprobado
                FROM AppBundle:PlanEstimadoCombustible e
                JOIN e.tipoCombustible t
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobadoEstimadoCombustibleMedioTransporte = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', true);
        $query->setParameter('p2', $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAprobarCombustibleMedioTrasporteMensual($data, $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //aprobar el presupuesto para los Centros de Costos
            $estimadoCombustible = $this->aprobarCombustibleMedioTrasporteMensual($data);

            if (is_string($estimadoCombustible)) {
                $em->rollback();
                $msg = $estimadoCombustible;
                return $msg;
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Aprobar la asignación mensual de litros para este tipo de combustible',
                'descripcion' => 'Se aprobó la asignación mensual de litros para el tipo de combustible: ' . $estimadoCombustible->getTipoCombustible()->getNombre()
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            // verificar si todas las tipos de combustibles estan aprobadas
            $verificarCombustible = $this->verificarAprobadoCombustibleMedioTrasporteMensual($data);

            if ($verificarCombustible === 0) {
//                $importe = $em->getRepository('AppBundle:PlanEstimadoIndicadores')
                $aprobar = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->aprobarTotalEstimadoCombustibleMensual($data);

                if (is_string($aprobar)) {
                    $em->rollback();
                    $msg = $aprobar;
                    return $msg;
                }
                $session = new Session();
                $session->set('aprobadoEstimadoCombustible', $aprobar->getAprobadoEstimadoCombustibleMedioTransporte());
            }

            //se crea la traza
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Aprobar la distribución mensual del combustible',
                'descripcion' => 'Se aprobó la distribución mensual del combustible'
            );
            $em->getRepository('AppBundle:Traza')->guardarTraza($dataTraza);

            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al aprobar la asignación mensual de litros para este tipo de combustible';
        }
        return $msg;
    }

    public function aprobarCombustibleMedioTrasporteMensual($data)
    {
        try {
            $em = $this->getEntityManager();
            $tipoCombustible = $em->getRepository('AppBundle:TipoCombustible')->find($data['tipoCombustible']);
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);

            $aprobarEstimadoCombustible = $em->getRepository('AppBundle:PlanEstimadoCombustible')->findOneBy(array('planEstimadoIndicadores' => $planEstimado, 'tipoCombustible' => $tipoCombustible));

            if (!empty($aprobarEstimadoCombustible)) {

                $aprobarEstimadoCombustible->setAprobadoEstimadoCombustibleMedioTransporte(true);

                $em->flush();
                $msg = $aprobarEstimadoCombustible;
            } else {
                $msg = $aprobarEstimadoCombustible;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar la asignación mensual de litros para este tipo de combustible';
        }

        return $msg;
    }

    public function verificarAprobadoCombustibleMedioTrasporteMensual($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobadoEstimadoCombustibleMedioTransporte
                FROM AppBundle:PlanEstimadoCombustible e
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobadoEstimadoCombustibleMedioTransporte = :p1 
                AND p.id = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['idPlanEstimado']);

        return count($query->getResult());

    }

}
