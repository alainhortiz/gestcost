<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PlanEstimadoDivisionMesOtrosGastos;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PlanEstimadoDivisionMesOtrosGastosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanEstimadoDivisionMesOtrosGastosRepository extends EntityRepository
{
    public function graficosOtroGastoEstimadoDivisionMensualTodos($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.id as servicio, d.id as division, d.nombre as divisionName,  e.mes, e.totalOtroGasto 
                FROM AppBundle:PlanEstimadoDivisionMesOtrosGastos e 
                JOIN e.otroGasto c
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $idPlanEstimado);

        return $query->getResult();

    }

    public function otroGastoEstimadoDivisionAgrupado($idPlanEstimado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.id as servicio, d.id as division, d.nombre as divisionName, SUM(e.totalOtroGasto) as totalOtroGasto
                FROM AppBundle:PlanEstimadoDivisionMesOtrosGastos e 
                JOIN e.otroGasto c
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1
                GROUP BY c.id, d.id, d.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $idPlanEstimado);

        return $query->getResult();

    }

    public function graficosOtroGastoEstimadoDivisionMensual($idPlanEstimado, $otroGasto, $division)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes,e.totalOtroGasto
                FROM AppBundle:PlanEstimadoDivisionMesOtrosGastos e 
                JOIN e.otroGasto s
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE s.id = :p1
                AND d.id = :p2 
                AND p.id = :p3
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $otroGasto);
        $query->setParameter('p2' , $division);
        $query->setParameter('p3' , $idPlanEstimado);

        return $query->getResult();

    }

    public function masterAgregarEstimadoOtroGastoDivision($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //agregar el presupuesto mensual para las divisiones
            $estimadoDivision = $this->agregarTotalEstimadoOtroGastoDivision($data);

            if(is_string($estimadoDivision)) {
                $em->rollback();
                $msg = $estimadoDivision;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Asignar presupuesto mensual por servicio para una división ',
                    'descripcion' => 'Se asignó el presupuesto mensual de otros gastos  a: '.$estimadoDivision->getOtroGasto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al asignar el presupuesto mensual por Divisiones del Plan de Otros Gastos';
        }
        return $msg;
    }

    public function agregarTotalEstimadoOtroGastoDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $totalEstimadoDivisionOtroGasto = new PlanEstimadoDivisionMesOtrosGastos();
            $totalEstimadoDivisionOtroGasto->setMes($data['mes']);
            $totalEstimadoDivisionOtroGasto->setTotalOtroGasto($data['presupuesto']);

            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $totalEstimadoDivisionOtroGasto->setDivisionCentroCosto($divisionCentroCosto);

            $otroGasto = $em->getRepository('AppBundle:OtroGasto')->find($data['otroGasto']);
            $totalEstimadoDivisionOtroGasto->setOtroGasto($otroGasto);

            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $totalEstimadoDivisionOtroGasto->setPlanEstimadoIndicadores($planEstimado);

            $em->persist($totalEstimadoDivisionOtroGasto);
            $em->flush();
            $msg = $totalEstimadoDivisionOtroGasto;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El presupuesto mensual de este servicio para esta división ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al asignar el presupuesto mensual de este servicio para esta división';
            }
        }
        return $msg;
    }

    public function verificarAprobadoEstimadoOtroGastoDivisionMeses($data)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT e.aprobarPrespuestoDivisionMesOtroGasto
                FROM AppBundle:PlanEstimadoOtrosGastos e
                JOIN e.otroGasto d
                JOIN e.planEstimadoIndicadores p
                WHERE e.aprobarPrespuestoDivisionMesOtroGasto = :p1 
                AND d.id = :p2
                AND p.id = :p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', false);
        $query->setParameter('p2', $data['otroGasto']);
        $query->setParameter('p3', $data['idPlanEstimado']);

        return count($query->getResult());

    }

    public function masterModificadorEstimadoOtroGastoDivision($data,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{

            //Modificar el presupuesto mensual para las divisiones
            $estimadoDivision = $this->modificarTotalEstimadoOtroGastoDivision($data);

            if(is_string($estimadoDivision)) {
                $em->rollback();
                $msg = $estimadoDivision;
            } else{
                //se crea la traza
                $dataTraza = array(
                    'username' => $user->getUsername(),
                    'nombre' => $user->getNombre(),
                    'operacion' => 'Modificar el presupuesto mensual por división al Plan de Otros Gastos',
                    'descripcion' => 'Se modificó el presupuesto mensual de otros gastos  a: '.$estimadoDivision->getOtroGasto()->getNombre()
                );
                $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
                $em->commit();
                $msg = 'ok';
            }

        }catch (Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al modificar el presupuesto mensual de este servicio por divisiones del Plan de Otros Gastos';
        }
        return $msg;
    }

    public function modificarTotalEstimadoOtroGastoDivision($data)
    {
        try {
            $em = $this->getEntityManager();
            $planEstimado = $em->getRepository('AppBundle:PlanEstimadoIndicadores')->find($data['idPlanEstimado']);
            $otroGasto = $em->getRepository('AppBundle:OtroGasto')->find($data['otroGasto']);
            $divisionCentroCosto = $em->getRepository('AppBundle:DivisionCentroCosto')->find($data['division']);
            $mes = $data['mes'];
            $totalEstimadoDivisionOtroGasto = $em->getRepository('AppBundle:PlanEstimadoDivisionMesOtrosGastos')->findOneBy(array('mes' => $mes,'planEstimadoIndicadores' => $planEstimado, 'otroGasto' => $otroGasto, 'divisionCentroCosto' => $divisionCentroCosto));

            if (!empty($totalEstimadoDivisionOtroGasto)) {

                $totalEstimadoDivisionOtroGasto->setTotalOtroGasto($data['presupuesto']);

                $em->persist($totalEstimadoDivisionOtroGasto);
                $em->flush();
                $msg = $totalEstimadoDivisionOtroGasto;
            } else {
                $msg = $totalEstimadoDivisionOtroGasto;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el presupuesto mensual de este servicio para esta división';
        }

        return $msg;
    }

    public function graficosOtroGastoEstimadoDivisionAgrupado($idPlanEstimado,$otroGasto)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre as division, SUM(e.totalOtroGasto) as totalOtroGasto
                FROM AppBundle:PlanEstimadoDivisionMesOtrosGastos e 
                JOIN e.divisionCentroCosto c
                JOIN e.otroGasto s
                JOIN e.planEstimadoIndicadores p
                WHERE s.id = :p1 
                AND p.id = :p2
                GROUP BY c.nombre
                ORDER BY totalOtroGasto DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $otroGasto);
        $query->setParameter('p2' , $idPlanEstimado);

        return $query->getResult();

    }

    public function graficosOtroGastoEstimadoMesAgrupado($idPlanEstimado,$otroGasto)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.mes, SUM(e.totalOtroGasto) as totalOtroGasto
                FROM AppBundle:PlanEstimadoDivisionMesOtrosGastos e 
                JOIN e.divisionCentroCosto c
                JOIN e.otroGasto s
                JOIN e.planEstimadoIndicadores p
                WHERE s.id = :p1 
                AND p.id = :p2
                GROUP BY e.mes
                ORDER BY e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $otroGasto);
        $query->setParameter('p2' , $idPlanEstimado);

        return $query->getResult();

    }

    public function otrosGastosDivisionActivos($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT d.id, d.nombre
                FROM AppBundle:PlanEstimadoDivisionMesOtrosGastos e
                JOIN e.otroGasto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function divisionOtrosGastosActivos($idPlanEstimado)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT DISTINCT d.id, d.nombre
                FROM AppBundle:PlanEstimadoDivisionMesOtrosGastos e
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE p.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPlanEstimado);

        return $query->getResult();

    }

    public function datoExportarOtroGastoEstimadoDivisionMensualTodos($idPlanEstimado,$division)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT c.nombre as otroGasto, e.mes, e.totalOtroGasto 
                FROM AppBundle:PlanEstimadoDivisionMesOtrosGastos e 
                JOIN e.otroGasto c
                JOIN e.divisionCentroCosto d
                JOIN e.planEstimadoIndicadores p
                WHERE d.id =:p1
                AND p.id =:p2
                ORDER BY c.id, e.id ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $division);
        $query->setParameter('p2' , $idPlanEstimado);

        return $query->getResult();

    }

}
